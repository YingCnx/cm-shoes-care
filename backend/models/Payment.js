import pool from "../config/database.js";

class Payment {
    // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏¥‡∏ß‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô (‡∏ó‡∏µ‡πà‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô "‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß")
    static async getCompletedQueues() {
        const result = await pool.query(`
            SELECT q.id, q.customer_name,q.phone,q.location, q.total_pairs, q.total_price, q.status 
            FROM queue q 
            WHERE q.status = '‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' and q.payment_status != '‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏•‡πâ‡∏ß'
        `);
        return result.rows;
    }

    // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
    static async create({ queue_id, discount, total_amount, payment_method, payment_status }) {
        try {
            const result = await pool.query(
                "INSERT INTO payments (queue_id, discount, total_amount, payment_method, payment_date, payment_status) VALUES ($1, $2, $3, $4, NOW() ,$5) RETURNING *",
                [queue_id, discount, total_amount, payment_method, payment_status]
            );

            await pool.query(
                "UPDATE queue SET payment_status = $1 WHERE id = $2",
                [payment_status,queue_id]
            );

            return result.rows[0];
        } catch (error) {
            console.error("üî¥ Error processing payment:", error);
            throw error;
        }
    }

    // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏Ç‡∏≠‡∏á Queue
    static async getPaymentByQueueId(queue_id) {
        const result = await pool.query(`
            SELECT * FROM payments WHERE queue_id = $1
        `, [queue_id]);
        return result.rows[0] || null;
    }

     // ‚úÖ ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏Ç‡∏≠‡∏á Queue
     static async deleteByQueueId(queue_id) {
        try {
            await pool.query("DELETE FROM payments WHERE queue_id = $1", [queue_id]);
        } catch (error) {
            console.error("üî¥ Error deleting payment:", error);
            throw error;
        }
    }
}

export default Payment;
