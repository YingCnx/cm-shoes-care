import pool from "../config/database.js";
import bcrypt from "bcryptjs";

class Employee {
    // üìå ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    static async getAll() {
        try {
            const result = await pool.query(`
                SELECT e.id, e.name, e.email, e.phone, e.role, 
                       e.branch_id, b.name AS branch_name
                FROM employees e
                LEFT JOIN branches b ON e.branch_id = b.id
                ORDER BY e.id ASC
            `);
            return result.rows;
        } catch (error) {
            console.error("üî¥ Error fetching employees:", error);
            throw error;
        }
    }

    // üìå ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ï‡∏≤‡∏° branch_id
    static async getByBranch(branch_id) {
        try {
            const result = await pool.query(`
                SELECT e.id, e.name, e.email, e.phone, e.role, 
                       e.branch_id, b.name AS branch_name
                FROM employees e
                LEFT JOIN branches b ON e.branch_id = b.id
                WHERE e.branch_id = $1
                ORDER BY e.id ASC
            `, [branch_id]);
    
            return result.rows;
        } catch (error) {
            console.error("üî¥ Error fetching employees by branch:", error.message);
            throw new Error(`‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• employees ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö branch_id = ${branch_id}`);
        }
    }

     // üìå ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà (‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô)
     static async create({ name, email, phone, role, branch_id, password }) {
        try {
            // üîë ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô
            const hashedPassword = await bcrypt.hash(password, 12);

            // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            await pool.query(
                "INSERT INTO employees (name, email, phone, role, branch_id, password) VALUES ($1, $2, $3, $4, $5, $6)",
                [name, email, phone, role, branch_id, hashedPassword] // ‚úÖ ‡πÉ‡∏ä‡πâ `hashedPassword`
            );

        } catch (error) {
            console.error("üî¥ Error creating employee:", error);
            throw error;
        }
    }

    // üìå ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô
    static async update(id, { name, email, phone, role, branch_id }) {
        try {    
            const result = await pool.query(
                "UPDATE employees SET name = $1, email = $2, phone = $3, role = $4, branch_id = $5 WHERE id = $6 RETURNING *",
                [name, email, phone, role, branch_id, id]
            );
    
            //console.log("‚úÖ Update Result:", result.rows);
    
            return result.rows[0] || null;
        } catch (err) {
            console.error("üî¥ Database Update Error:", err);
            throw err;
        }
    }
    

    // üìå ‡∏•‡∏ö‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô
    static async delete(id) {
        try {
            //console.log("üîç Checking if employee exists:", id);
    
            // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏•‡∏ö
            const result = await pool.query("DELETE FROM employees WHERE id = $1 RETURNING *", [id]);
    
            ////console.log("‚úÖ Employee deleted:", result.rows[0]); // Log ‡πÄ‡∏û‡∏∑‡πà‡∏≠ debug
            return result.rows[0] || null;
        } catch (err) {
            console.error("üî¥ Database Error:", err);
            throw err;
        }
    }
}

export default Employee;
