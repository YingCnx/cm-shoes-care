import Service from "../models/Services.js";

// ‚úÖ ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
export const getAllServices = async (req, res) => {
    try {
      const { branch_id } = req.query; // ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤ branch_id ‡∏à‡∏≤‡∏Å query params
      const user = req.session.user;
  
      //console.log("üìå Debug: User Data:", user);
      //console.log("üìå Debug: branch_id =", branch_id);
  
      let services;
      if (user.isSuperAdmin) {
        // SuperAdmin ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏π‡∏ó‡∏∏‡∏Å‡∏™‡∏≤‡∏Ç‡∏≤ ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏™‡∏≤‡∏Ç‡∏≤
        services = branch_id ? await Service.getByBranch(branch_id) : await Service.getAll();
      } else {
        // Employee ‡πÄ‡∏´‡πá‡∏ô‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡∏≠‡∏á‡∏™‡∏≤‡∏Ç‡∏≤‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á
        services = await Service.getByBranch(user.branch_id);
      }
  
      //console.log("‚úÖ Services Fetched:", services);
      res.json(services);
    } catch (error) {
      console.error("üî¥ Error fetching services:", error.message);
      res.status(500).json({ message: "‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡πÑ‡∏î‡πâ" });
    }
  };
  

// ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏ï‡∏≤‡∏° ID
export const getServiceById = async (req, res) => {
    try {
        const service = await Services.getServiceById(req.params.id);
        if (!service) return res.status(404).json({ message: "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£" });
        res.json(service);
    } catch (error) {
        console.error("üî¥ Error fetching service:", error);
        res.status(500).json({ message: "Server error" });
    }
};

// ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà
export const createService = async (req, res) => {
    try {
      const { service_name, base_price, description, branch_id } = req.body;
      const user = req.session.user;
  
      // Employee ‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ branch_id ‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
      const assignedBranch = user.isSuperAdmin ? branch_id : user.branch_id;
  
      if (!service_name || !base_price || !assignedBranch) {
        return res.status(400).json({ message: "‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô" });
      }
  
      const newService = await Service.create(service_name, base_price, description, assignedBranch);
      res.status(201).json({ message: "‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢", service: newService });
    } catch (error) {
      console.error("üî¥ Error creating service:", error.message);
      res.status(500).json({ message: "‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡πÑ‡∏î‡πâ" });
    }
  };
  
  

// ‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£
export const updateService = async (req, res) => {
    try {
      const { id } = req.params;
      const { service_name, base_price, description, branch_id } = req.body;
      const user = req.session.user;
  
      // Employee ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô branch_id ‡πÑ‡∏î‡πâ
      const assignedBranch = user.isSuperAdmin ? branch_id : user.branch_id;
  
      const updatedService = await Service.update(id, service_name, base_price, description, assignedBranch);
      res.json({ message: "‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢", service: updatedService });
    } catch (error) {
      console.error("üî¥ Error updating service:", error.message);
      res.status(500).json({ message: "‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡πÑ‡∏î‡πâ" });
    }
  };
  

// ‚úÖ ‡∏•‡∏ö‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£
export const deleteService = async (req, res) => {
    try {
      const { id } = req.params;
      await Service.delete(id);
      res.json({ message: "‚úÖ ‡∏•‡∏ö‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢" });
    } catch (error) {
      console.error("üî¥ Error deleting service:", error.message);
      res.status(500).json({ message: "‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡πÑ‡∏î‡πâ" });
    }
  };
  
