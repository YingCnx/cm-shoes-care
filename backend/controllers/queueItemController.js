import QueueItem from "../models/QueueItem.js";
import Queue from "../models/Queue.js";
import pool from "../config/database.js";

import fs from 'fs';
import path from 'path';


// ‚úÖ 1Ô∏è‚É£ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≠‡∏á‡πÄ‡∏ó‡πâ‡∏≤‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ
export const addQueueItem = async (req, res) => {
  try {
    //console.log("üìå Debug: Request body:", req.body);
    //console.log("üìå Debug: Uploaded files:", req.files);

    const { queue_id } = req.params;
    const { service_id, brand, model, color, notes, price_per_pair } = req.body;
    const parsedPrice = parseFloat(price_per_pair) || 0;

    if (!queue_id || !service_id || !brand || !model || !color) {
      return res.status(400).json({ message: "‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô" });
    }

    const uploadedFiles = req.files ?? {};

    const newShoe = {
      queue_id,
      service_id,
      price_per_pair: parsedPrice,
      brand,
      model,
      color,
      notes,
      image_front: uploadedFiles.image_front?.[0]?.filename ? `/uploads/${uploadedFiles.image_front[0].filename}` : null,
      image_back: uploadedFiles.image_back?.[0]?.filename ? `/uploads/${uploadedFiles.image_back[0].filename}` : null,
      image_left: uploadedFiles.image_left?.[0]?.filename ? `/uploads/${uploadedFiles.image_left[0].filename}` : null,
      image_right: uploadedFiles.image_right?.[0]?.filename ? `/uploads/${uploadedFiles.image_right[0].filename}` : null,
      image_top: uploadedFiles.image_top?.[0]?.filename ? `/uploads/${uploadedFiles.image_top[0].filename}` : null,
      image_bottom: uploadedFiles.image_bottom?.[0]?.filename ? `/uploads/${uploadedFiles.image_bottom[0].filename}` : null
    };

    //console.log("üìå Debug: Data being inserted into DB:", newShoe);
    
    await QueueItem.add(newShoe);
    await Queue.updateTotalPairsAndPrice(queue_id);
    res.status(201).json({ message: "‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≠‡∏á‡πÄ‡∏ó‡πâ‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢!" });

  } catch (error) {
    console.error("üî¥ Error adding shoe:", error);
    res.status(500).json({ message: "Server error" });
  }
};


// ‚úÖ 2Ô∏è‚É£ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ AFTER
export const uploadAfterImages = async (req, res) => {
  try {
      //console.log("üìå Debug: Uploaded After Images:", req.files);

      const { queue_id, item_id } = req.params;

      if (!req.files || req.files.length === 0) {
          console.error("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡∏ñ‡∏π‡∏Å‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î!");
          return res.status(400).json({ message: "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î!" });
      }

      // ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
      const uploadedFiles = {};
      for (const field in req.files) {
          const file = req.files[field][0]; // ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÅ‡∏ï‡πà‡∏•‡∏∞ field ‡∏°‡∏µ array
          if (file) {
              uploadedFiles[field] = `/uploads/${file.filename}`;
          }
      }

      ////console.log("üìå Debug: ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", uploadedFiles);

      // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ queue_item ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á
      const itemExists = await pool.query("SELECT * FROM queue_items WHERE id = $1 AND queue_id = $2", [item_id, queue_id]);
      if (itemExists.rows.length === 0) {
          return res.status(404).json({ message: "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≠‡∏á‡πÄ‡∏ó‡πâ‡∏≤‡πÉ‡∏ô Queue ‡∏ô‡∏µ‡πâ!" });
      }

      // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏£‡∏π‡∏õ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î
      await pool.query(`
          UPDATE queue_items 
          SET image_after_front = COALESCE($1, image_after_front),
              image_after_back = COALESCE($2, image_after_back),
              image_after_left = COALESCE($3, image_after_left),
              image_after_right = COALESCE($4, image_after_right),
              image_after_top = COALESCE($5, image_after_top),
              image_after_bottom = COALESCE($6, image_after_bottom)
          WHERE id = $7 AND queue_id = $8`,
          [
              uploadedFiles.image_after_front || itemExists.rows[0].image_after_front,
              uploadedFiles.image_after_back || itemExists.rows[0].image_after_back,
              uploadedFiles.image_after_left || itemExists.rows[0].image_after_left,
              uploadedFiles.image_after_right || itemExists.rows[0].image_after_right,
              uploadedFiles.image_after_top || itemExists.rows[0].image_after_top,
              uploadedFiles.image_after_bottom || itemExists.rows[0].image_after_bottom,
              item_id,
              queue_id
          ]
      );

      //console.log("üìå Debug: ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!", uploadedFiles);

      res.status(200).json({ message: "‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏π‡∏õ After ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!", data: uploadedFiles });

  } catch (error) {
      console.error("üî¥ Error uploading After images:", error);
      res.status(500).json({ message: "‚ùå Server Error" });
  }
};





// ‚úÖ 3Ô∏è‚É£ ‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏£‡∏≠‡∏á‡πÄ‡∏ó‡πâ‡∏≤ (Queue Item)

export const deleteQueueItem = async (req, res) => {
  try {
    const { queue_id, queue_item_id } = req.params;

    const item = await QueueItem.getById(queue_item_id);
    if (!item) {
      return res.status(404).json({ message: "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏£‡∏≠‡∏á‡πÄ‡∏ó‡πâ‡∏≤" });
    }

    // ‚úÖ ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏†‡∏≤‡∏û‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
    const fields = [
      "image_before_front", "image_before_back", "image_before_left", "image_before_right", "image_before_top", "image_before_bottom",
      "image_after_front", "image_after_back", "image_after_left", "image_after_right", "image_after_top", "image_after_bottom"
    ];

    fields.forEach(field => {
      const imgPath = item[field];
      if (imgPath) {
        const fullPath = path.join("uploads", path.basename(imgPath));
        if (fs.existsSync(fullPath)) {
          fs.unlinkSync(fullPath);
        }
      }
    });

    await QueueItem.delete(queue_item_id);
    await Queue.updateTotalPairsAndPrice(queue_id);

    res.status(200).json({ message: "‚úÖ ‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏£‡∏≠‡∏á‡πÄ‡∏ó‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢!" });
  } catch (error) {
    console.error("üî¥ Error deleting queue item:", error);
    res.status(500).json({ message: "‚ùå ‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏£‡∏≠‡∏á‡πÄ‡∏ó‡πâ‡∏≤‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß" });
  }
};
