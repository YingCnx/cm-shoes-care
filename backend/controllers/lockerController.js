// LockerController.js
import Locker from "../models/adminLocker/Locker.js";
import LockerSlot from "../models/adminLocker/LockerSlot.js";
import LockerDrop from "../models/adminLocker/LockerDrop.js";

import Branch from "../models/Branch.js";

import Queue from "../models/Queue.js";


// üìå ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏π‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏ï‡∏≤‡∏°‡∏™‡∏≤‡∏Ç‡∏≤ ‡∏´‡∏£‡∏∑‡∏≠‡∏ó‡∏∏‡∏Å‡∏ï‡∏π‡πâ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô superadmin)
export const getAllLockers = async (req, res) => {
  try {
    const { branch_id } = req.query;
    const user = req.user;
    let lockers;

    if (user.isSuperAdmin) {
      lockers = branch_id
        ? await Locker.getByBranch(branch_id)
        : await Locker.getAll();
    } else {
      lockers = await Locker.getByBranch(user.branch_id);
    }

    res.json(lockers);
  } catch (error) {
    console.error("üî¥ Error fetching lockers:", error);
    res.status(500).json({ message: "Server error" });
  }
};
// üìå ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏π‡πâ Locker ‡πÉ‡∏´‡∏°‡πà ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡∏£‡πâ‡∏≤‡∏á code ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
export const createLocker = async (req, res) => {
  try {
    const {
      name,
      branch_id,
      address,
      latitude,
      longitude,
      sim_number,
      device_serial,
      firmware_version,
      note,
      slot_count
    } = req.body;

    if (!name || !branch_id || !address) {
      return res.status(400).json({ message: "‚ùå ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô" });
    }

    const branch = await Branch.getById(branch_id);
    if (!branch) return res.status(404).json({ message: "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≤‡∏Ç‡∏≤" });

    const branchCode = 'BR' + branch.id.toString().padStart(2, '0');
    const existingLockers = await Locker.getByBranch(branch_id);
    const nextNumber = 'L'+ (existingLockers.length + 1).toString().padStart(3, '0');
    const generatedCode = `${branchCode}-${nextNumber}`;

    await Locker.create({
      code: generatedCode,
      name,
      branch_id,
      address,
      latitude,
      longitude,
      sim_number,
      device_serial,
      firmware_version,
      note,
      slot_count
    });

    res.status(201).json({
      message: "‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏π‡πâ Locker ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢",
      code: generatedCode
    });

  } catch (err) {
    console.error("üî¥ Error creating locker:", err);
    res.status(500).json({ error: err.message });
  }
};

// üìå ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏π‡πâ
export const updateLocker = async (req, res) => {
  try {
    const updatedLocker = await Locker.update(req.params.id, req.body);

    if (!updatedLocker) {
      return res.status(404).json({ message: "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ï‡∏π‡πâ Locker" });
    }

    res.json({ message: "‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢" });
  } catch (err) {
    console.error("üî¥ Error updating locker:", err);
    res.status(500).json({ error: err.message });
  }
};

// üìå ‡∏•‡∏ö‡∏ï‡∏π‡πâ Locker
export const deleteLocker = async (req, res) => {
  const lockerId = req.params.id;

  try {
    // ‚úÖ 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ñ‡∏¥‡∏ß‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ locker ‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const queueInThisLocker = await Queue.getByLockerId(lockerId);

    if (queueInThisLocker.length > 0) {
      return res.status(400).json({
        message: "‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏ï‡∏π‡πâ‡πÑ‡∏î‡πâ ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏°‡∏µ‡∏Ñ‡∏¥‡∏ß‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ï‡∏π‡πâ‡πÉ‡∏ö‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà",
      });
    }

    // ‚úÖ 2. ‡∏•‡∏ö‡∏ï‡∏π‡πâ (‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏¥‡∏ß‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô)
    const deleted = await Locker.delete(lockerId);

    if (!deleted) {
      return res.status(404).json({ message: "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ï‡∏π‡πâ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö" });
    }

    res.status(200).json({ message: "‚úÖ ‡∏•‡∏ö‡∏ï‡∏π‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢" });
  } catch (err) {
    console.error("üî¥ Error deleting locker:", err);
    res.status(500).json({ error: err.message });
  }
};

export const updateLockerStatus = async (req, res) => {
  const { id } = req.params;
  const { is_online } = req.body;

  try {
    const updated = await Locker.updateStatus(id, is_online);
    if (!updated) {
      return res.status(404).json({ message: "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ï‡∏π‡πâ" });
    }
    res.json({ message: "‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢", locker: updated });
  } catch (error) {
    console.error("üî¥ Error updating locker status:", error);
    res.status(500).json({ message: "‚ùå Server error" });
  }
};

//------------------SLOTS----------------//
export const getLockerSlots = async (req, res) => {
  const { lockerId } = req.params;
  try {
    const slots = await LockerSlot.getByLocker(lockerId); // <- ‡πÄ‡∏ä‡πá‡∏Ñ‡πÉ‡∏´‡πâ‡∏ä‡∏∑‡πà‡∏≠‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö model
    res.json(slots);
  } catch (error) {
    console.error("üî¥ Error fetching slots:", error);
    res.status(500).json({ message: "Server error" });
  }
};


export const updateSlot = async (req, res) => {
  const { slotId } = req.params;
  const { status } = req.body;

  try {
    const updated = await LockerSlot.update(slotId, status);
    if (!updated) {
      return res.status(404).json({ message: "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö slot ‡∏ô‡∏µ‡πâ" });
    }
    res.json(updated);
  } catch (err) {
    console.error("üî¥ Error updating slot:", err);
    res.status(500).json({ error: err.message });
  }
};

//-------------------locker-drop----------------//
// ‚úÖ GET pending locker drops (by branch_id)
export const getPendingLockerDrops = async (req, res) => {
  try {
    const { branch_id } = req.query;
    if (!branch_id) {
      return res.status(400).json({ message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏£‡∏´‡∏±‡∏™‡∏™‡∏≤‡∏Ç‡∏≤" });
    }

    const drops = await LockerDrop.getPendingByBranch(branch_id);
    res.status(200).json(drops);
  } catch (error) {
    console.error("üî¥ Error fetching pending locker drops:", error.message);
    res.status(500).json({ message: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏£‡∏±‡∏ö‡∏à‡∏≤‡∏Å‡∏ï‡∏π‡πâ‡πÑ‡∏î‡πâ" });
  }
};


// ‚úÖ UPDATE status
export const updateLockerDropStatus = async (req, res) => {
  try {
    const { id } = req.params;
    const { status } = req.body;

    if (!status) {
      return res.status(400).json({ message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏´‡∏°‡πà" });
    }

    const updated = await LockerDrop.updateStatusById(id, status);
    if (!updated) {
      return res.status(404).json({ message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ù‡∏≤‡∏Å‡∏ï‡∏π‡πâ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï" });
    }

    res.status(200).json({ message: "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", data: updated });
  } catch (error) {
    console.error("üî¥ Error updating locker drop status:", error.message);
    res.status(500).json({ message: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏î‡πâ" });
  }
};

// ‚úÖ GET by ID
export const getLockerDropById = async (req, res) => {
  try {
    const drop = await LockerDrop.getById(req.params.id);
    if (!drop) {
      return res.status(404).json({ message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ù‡∏≤‡∏Å‡∏ï‡∏π‡πâ" });
    }

    res.status(200).json(drop);
  } catch (error) {
    console.error("üî¥ Error fetching locker drop:", error.message);
    res.status(500).json({ message: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ù‡∏≤‡∏Å‡∏ï‡∏π‡πâ‡πÑ‡∏î‡πâ" });
  }
};

// ‚úÖ GET all (admin only)
export const getAllLockerDrops = async (req, res) => {
  try {
    const drops = await LockerDrop.getAll();
    res.status(200).json(drops);
  } catch (error) {
    console.error("üî¥ Error fetching all locker drops:", error.message);
    res.status(500).json({ message: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ù‡∏≤‡∏Å‡∏ï‡∏π‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÑ‡∏î‡πâ" });
  }
};

