import Branch from "../models/Branch.js";
import pool from "../config/database.js";

// üìå 1Ô∏è‚É£ ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏Ç‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡πÄ‡∏â‡∏û‡∏≤‡∏∞ Admin)
export const getBranches = async (req, res) => {
  try {
    const user = req.session.user;
    console.log("üìå Debug: User Requesting Branches", user);

    if (!user?.role || (user.role !== "superadmin" && !user.branch_id)) {
      return res.status(403).json({ message: "Unauthorized access" });
    }

    let branches;
    if (user.role === "superadmin") {
      branches = await Branch.getAll();
    } else {
      const branch = await Branch.getById(user.branch_id);
      if (!branch) {
        return res.status(404).json({ message: "No branch found" });
      }
      branches = [branch]; // ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô array ‡πÄ‡∏™‡∏°‡∏≠
    }

    res.json(branches);
  } catch (error) {
    console.error("üî¥ Error fetching branches:", error);
    res.status(500).json({ message: "Server error" });
  }
};

export const getAllBranchesPublic = async (req, res) => {
  try {
    const branches = await Branch.getAll();
    res.json(branches);
  } catch (error) {
    console.error("üî¥ Error fetching public branches:", error);
    res.status(500).json({ message: "Server error" });
  }
};

// üìå 2Ô∏è‚É£ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≤‡∏Ç‡∏≤‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß
export const getBranchById = async (req, res) => {
  try {
    const branch = await Branch.getById(req.params.id);

    if (!branch) {
      return res.status(404).json({ message: "Branch not found" });
    }

    res.json(branch);
  } catch (error) {
    console.error("üî¥ Error fetching branch:", error);
    res.status(500).json({ message: "Server error" });
  }
};

// üìå 3Ô∏è‚É£ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏≤‡∏Ç‡∏≤‡πÉ‡∏´‡∏°‡πà (‡πÄ‡∏â‡∏û‡∏≤‡∏∞ Admin)
export const createBranch = async (req, res) => {
  try {
    const user = req.session.user;
    if (!user?.role || user.role !== "superadmin") {
      return res.status(403).json({ message: "Unauthorized access" });
    }

    const { name, location, phone } = req.body;
    if (!name || !location || !phone) {
      return res.status(400).json({ message: "Missing required fields" });
    }

    await Branch.create({ name, location, phone });
    res.status(201).json({ message: "Branch created successfully" });
  } catch (error) {
    console.error("üî¥ Error creating branch:", error);
    res.status(500).json({ message: "Server error" });
  }
};

// üìå 4Ô∏è‚É£ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≤‡∏Ç‡∏≤ (‡πÄ‡∏â‡∏û‡∏≤‡∏∞ Admin)
export const updateBranch = async (req, res) => {
  try {
    const user = req.session.user;
    if (!user?.role || user.role !== "superadmin") {
      return res.status(403).json({ message: "Unauthorized access" });
    }

    const { name, location, phone } = req.body;
    if (!name || !location || !phone) {
      return res.status(400).json({ message: "Missing required fields" });
    }

    await Branch.update(req.params.id, { name, location, phone });
    res.json({ message: "Branch updated successfully" });
  } catch (error) {
    console.error("üî¥ Error updating branch:", error);
    res.status(500).json({ message: "Server error" });
  }
};

// üìå 5Ô∏è‚É£ ‡∏•‡∏ö‡∏™‡∏≤‡∏Ç‡∏≤ (‡πÄ‡∏â‡∏û‡∏≤‡∏∞ Admin)
export const deleteBranch = async (req, res) => {
  const branchId = req.params.id;

  try {
    const user = req.session.user;
    if (!user?.role || user.role !== "superadmin") {
      return res.status(403).json({ message: "Unauthorized access" });
    }

    const checkAppointments = await pool.query("SELECT COUNT(*) FROM appointments WHERE branch_id = $1", [branchId]);
    const checkEmployees = await pool.query("SELECT COUNT(*) FROM employees WHERE branch_id = $1", [branchId]);

    if (checkAppointments.rows[0].count > 0 || checkEmployees.rows[0].count > 0) {
      return res.status(400).json({ message: "‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏™‡∏≤‡∏Ç‡∏≤‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡∏≠‡∏¢‡∏π‡πà" });
    }

    await Branch.delete(branchId);
    res.json({ message: "‚úÖ Branch deleted successfully" });

  } catch (error) {
    console.error("üî¥ Error deleting branch:", error);
    res.status(500).json({ message: `‚ùå Server error: ${error.message}` });
  }
};
