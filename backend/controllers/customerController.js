import Customer from "../models/Customer.js";

// ‚úÖ CREATE
export const createCustomer = async (req, res) => {
  try {
    const { name, phone, address, notes, branch_id, origin_source } = req.body;

    if (!name || !phone || !branch_id) {
      return res.status(400).json({ message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠ ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£ ‡πÅ‡∏•‡∏∞‡∏™‡∏≤‡∏Ç‡∏≤" });
    }

    const newCustomer = await Customer.create({ name, phone, address, notes, branch_id, origin_source: origin_source || 'manual'});
    res.status(201).json(newCustomer);
  } catch (error) {
    console.error("üî¥ Error creating customer:", error.message);

    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö constraint ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏â‡∏û‡∏≤‡∏∞
    if (error.code === "23505" && error.constraint === "unique_phone_per_branch") {
      return res.status(400).json({ message: "‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏™‡∏≤‡∏Ç‡∏≤‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß" });
    }

    res.status(500).json({ message: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÑ‡∏î‡πâ" });
  }
};


// ‚úÖ READ ALL (by branch_id)
export const getCustomers = async (req, res) => {
  try {
    const branchId = req.query.branch_id;

    let customers;
    if (branchId) {
      customers = await Customer.getByBranch(branchId);
    } else {
      customers = await Customer.getAll();
    }

    res.status(200).json(customers);
  } catch (error) {
    console.error("üî¥ Error fetching customers:", error.message);
    res.status(500).json({ message: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÑ‡∏î‡πâ" });
  }
};

// ‚úÖ READ ONE
export const getCustomerById = async (req, res) => {
  try {
    const customer = await Customer.getById(req.params.id);
    if (!customer) {
      return res.status(404).json({ message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤" });
    }
    res.status(200).json(customer);
  } catch (error) {
    console.error("üî¥ Error fetching customer:", error.message);
    res.status(500).json({ message: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÑ‡∏î‡πâ" });
  }
};

// ‚úÖ UPDATE
export const updateCustomer = async (req, res) => {
  try {
    const { name, phone, address, status, notes, branch_id, origin_source } = req.body;

    const updatedCustomer = await Customer.update(req.params.id, {
      name, phone, address, status, notes, branch_id, origin_source
    });

    res.status(200).json(updatedCustomer);
  } catch (error) {
    console.error("üî¥ Error updating customer:", error.message);
    res.status(500).json({ message: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÑ‡∏î‡πâ" });
  }
};

// ‚úÖ DELETE (SuperAdmin only)
export const deleteCustomer = async (req, res) => {
  try {
    /* if (!req.user?.isSuperAdmin) {
      return res.status(403).json({ message: "‡πÄ‡∏â‡∏û‡∏≤‡∏∞ SuperAdmin ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÑ‡∏î‡πâ" });
    } */

    const existingCustomer = await Customer.getById(req.params.id);
    if (!existingCustomer) {
      return res.status(404).json({ message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö" });
    }

    const deletedCustomer = await Customer.delete(req.params.id);
    res.status(200).json({ message: "‡∏•‡∏ö‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", data: deletedCustomer });
  } catch (error) {
    console.error("üî¥ Error deleting customer:", error.message);
    res.status(500).json({ message: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÑ‡∏î‡πâ" });
  }
};


export const checkDuplicatePhone = async (req, res) => {
  try {
    const { phone, branch_id } = req.query;

    if (!phone || !branch_id) {
      return res.status(400).json({ message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡πÅ‡∏•‡∏∞‡∏£‡∏´‡∏±‡∏™‡∏™‡∏≤‡∏Ç‡∏≤" });
    }

    const exists = await Customer.isPhoneDuplicate(phone, branch_id);
    res.status(200).json({ exists });
  } catch (error) {
    console.error("‚ùå Error checking duplicate phone:", error);
    res.status(500).json({ message: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡πÑ‡∏î‡πâ" });
  }
};