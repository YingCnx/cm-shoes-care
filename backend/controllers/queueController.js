import Queue from "../models/Queue.js";
import Expense from "../models/expense.js";

import fs from 'fs';
import path from 'path';
import { createCanvas } from 'canvas';

// ‚úÖ 1Ô∏è‚É£ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏¥‡∏ß‡πÉ‡∏´‡∏°‡πà
export const createQueue = async (req, res) => {
  try {
      const {customer_id, customer_name, phone, location, total_pairs, received_date, delivery_date, branch_id, source } = req.body;

      if (!customer_id || !customer_name || !phone || !total_pairs|| !received_date || !delivery_date || !branch_id) {
          return res.status(400).json({ message: "‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô" });
      }

      const queue_id = await Queue.create({
          customer_id,
          customer_name,
          phone,
          location,
          total_pairs,
          total_price: 0, // ‚úÖ ‡πÉ‡∏´‡πâ default ‡πÄ‡∏õ‡πá‡∏ô 0
          received_date,
          delivery_date,
          branch_id,
          source
      });

      res.status(201).json({ message: "‚úÖ ‡∏Ñ‡∏¥‡∏ß‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢", queue_id });
  } catch (error) {
      console.error("üî¥ Error adding to queue:", error.message);
      res.status(500).json({ message: error.message });
  }
};

// ‚úÖ 2Ô∏è‚É£ ‡∏î‡∏∂‡∏á‡∏Ñ‡∏¥‡∏ß‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
export const getAllQueues = async (req, res) => {
  try {
    const { branch_id } = req.query; // ‚úÖ ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤ branch_id ‡∏à‡∏≤‡∏Å Query Params
    const user = req.user; // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• User ‡∏à‡∏≤‡∏Å Middleware

    //console.log("üìå Debug: User Data:", user);
    //console.log("üìå Debug: branch_id =", branch_id);

    let queues;
    if (user.isSuperAdmin) {
      queues = branch_id ? await Queue.getByBranch(branch_id) : await Queue.getAll();
    } else {
      queues = await Queue.getByBranch(user.branch_id);
    }

    ///console.log("‚úÖ Queues Fetched:", queues);
    res.json(queues);
  } catch (error) {
    console.error("üî¥ Error fetching queues:", error.message);
    res.status(500).json({ message: "‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏¥‡∏ß‡πÑ‡∏î‡πâ" });
  }
};





// ‚úÖ 3Ô∏è‚É£ ‡∏î‡∏∂‡∏á‡∏Ñ‡∏¥‡∏ß‡∏ï‡∏≤‡∏° ID
export const getQueueById = async (req, res) => {
  try {
    const queue = await Queue.getById(req.params.id);
    if (!queue) return res.status(404).json({ message: "Queue not found" });
    res.json(queue);
  } catch (error) {
    console.error("üî¥ Error fetching queue by ID:", error.message);
    res.status(500).json({ message: error.message });
  }
};

export const updateQueue = async (req, res) => {
  const { id } = req.params;
  const { location, total_pairs, received_date, delivery_date } = req.body;
    // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° debug ‡∏ä‡∏±‡∏î ‡πÜ
  console.log("üì• id:", id);
  console.log("üì• body:", req.body);

  if (!location || !received_date || !delivery_date || total_pairs === undefined) {
    return res.status(400).json({ error: "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö" }); // üî• <-- ‡∏°‡∏≤‡∏à‡∏≤‡∏Å‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ‡πÅ‡∏ô‡πà
  }

  try {
    const result = await Queue.updateQueue(id, location, total_pairs, received_date, delivery_date) ;
    res.json(result);
  } catch (error) {
    console.error("üî¥ Error updating queue:", error.message);
    res.status(500).json({ message: error.message });
  } 
};

// ‚úÖ 4Ô∏è‚É£ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏¥‡∏ß
export const updateQueueStatus = async (req, res) => {
  const { status, total_price } = req.body;
  const queueId = parseInt(req.params.id, 10);
  if (isNaN(queueId)) {
    return res.status(400).json({ message: "Invalid queue ID" });
  }
  try {
    const result = await Queue.updateStatus(queueId, status, total_price);
    res.json(result);
  } catch (error) {
    console.error("üî¥ Error updating queue status:", error.message);
    res.status(500).json({ message: error.message });
  }
};


// ‚úÖ 5Ô∏è‚É£ ‡∏•‡∏ö‡∏Ñ‡∏¥‡∏ß
export const deleteQueue = async (req, res) => {
  try {
    const result = await Queue.delete(req.params.id);
    res.json(result);
  } catch (error) {
    console.error("üî¥ Error deleting queue:", error.message);
    res.status(500).json({ message: error.message });
  }
};

const formatDate = (date) => {
  const d = new Date(date);
  const day = d.getDate().toString().padStart(2, '0'); // ‚úÖ ‡πÄ‡∏ï‡∏¥‡∏° 0 ‡∏ñ‡πâ‡∏≤‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ 10
  const month = (d.getMonth() + 1).toString().padStart(2, '0'); // ‚úÖ ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å 0 ‡∏ï‡πâ‡∏≠‡∏á +1
  const year = d.getFullYear();
  return `${day}/${month}/${year}`;
};

export const generateInvoice = async (req, res) => {
  try {
      const queue_id = req.params.queue_id;
      const queue = await Queue.getById(queue_id);
      const expenses = await Expense.getById(queue_id);

      if (!queue) {
          return res.status(404).json({ message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏¥‡∏ß‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö" });
      }

      const totalPrice = parseFloat(queue.total_price) || 0;

      // ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á Canvas
      const canvas = createCanvas(600, 1000);
      const ctx = canvas.getContext('2d');

      // ‡∏ß‡∏≤‡∏î‡πÉ‡∏ö‡πÅ‡∏à‡πâ‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤ (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
      ctx.fillStyle = 'white';
      ctx.fillRect(0, 0, canvas.width, canvas.height);
      ctx.fillStyle = 'black';
      ctx.font = '28px "Noto Sans Thai"';
      ctx.fillText('üè† ‡∏£‡πâ‡∏≤‡∏ô‡∏ã‡∏±‡∏Å‡πÄ‡∏Å‡∏¥‡∏ö‡πÅ‡∏≠‡∏ô‡∏î‡πå‡∏™‡∏õ‡∏≤', 150, 50);
      ctx.font = '24px "Noto Sans Thai"';
      ctx.fillText(`üìç ‡∏™‡∏≤‡∏Ç‡∏≤: ${queue.branch_name}`, 150, 80);
      ctx.font = 'bold 24px "Noto Sans Thai"';
      ctx.fillText(`üìú ‡πÉ‡∏ö‡πÅ‡∏à‡πâ‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤`, 50, 130);
      ctx.font = '22px "Noto Sans Thai"';
      ctx.fillText(`üÜî ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏¥‡∏ß: #${queue_id}`, 50, 170);
      ctx.fillText(`üë§ ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤: ${queue.customer_name}`, 50, 200);
      ctx.fillText(`üìû ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£: ${queue.phone}`, 50, 230);
      ctx.fillText(`üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: ${formatDate(new Date())}`, 50, 260);
      ctx.fillText(`-------------------------------------------------`, 50, 290);
      ctx.font = 'bold 22px "Noto Sans Thai"';
      ctx.fillText(`üìå ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£:`, 50, 320);
      ctx.font = '22px "Noto Sans Thai"';
      let startY = 360;
      queue.queue_items.forEach((item, index) => {
          ctx.fillText(`${index + 1}. ${item.brand} ${item.model} ${item.color} - ${item.price_per_pair} ‡∏ö‡∏≤‡∏ó`, 50, startY);
          startY += 40;
      });
      ctx.fillText(`-------------------------------------------------`, 50, startY + 10);
      ctx.font = 'bold 22px "Noto Sans Thai"';
      ctx.fillText(`üí∞ ‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°:`, 50, startY + 40);
      ctx.font = '22px "Noto Sans Thai"';
      startY += 80;
      if (expenses.length > 0) {
          expenses.forEach((expense, index) => {
              ctx.fillText(`${index + 1}. ${expense.description} - ${expense.amount} ‡∏ö‡∏≤‡∏ó`, 50, startY);
              startY += 40;
          });
      } else {
          ctx.fillText("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°", 50, startY);
          startY += 40;
      }
      ctx.font = 'bold 24px "Noto Sans Thai"';
      ctx.fillText(`üí∞ ‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${totalPrice.toFixed(2)} ‡∏ö‡∏≤‡∏ó`, 50, startY + 40);
      ctx.fillText(`‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤`, 50, startY + 100);

      // ‚úÖ ‡∏™‡πà‡∏á base64 ‡∏Å‡∏•‡∏±‡∏ö (‡πÑ‡∏°‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå)
      const buffer = canvas.toBuffer('image/png');
      const base64Image = buffer.toString('base64');

      res.json({ image_base64: `data:image/png;base64,${base64Image}` });

  } catch (error) {
      console.error("üî¥ Error generating invoice:", error);
      res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ö‡πÅ‡∏à‡πâ‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤" });
  }
};



