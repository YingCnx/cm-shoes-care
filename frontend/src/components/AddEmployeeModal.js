import React, { useState, useEffect } from "react";
import "../assets/css/bootstrap.min.css";
import "./AddEmployeeModal.css";
import { getBranches } from "../services/api";
import { checkSession } from '../services/authService'; 

const AddEmployeeModal = ({ show, onClose, onSave, employeeData }) => {
  const [branches, setBranches] = useState([]);
  const [error, setError] = useState(null);
  const [user, setUser] = useState(null);

  const [employee, setEmployee] = useState({
    name: "",
    email: "",
    phone: "",
    role: "",
    branch_id: "",
    password: ""
  });

  // ‚úÖ ‡πÇ‡∏´‡∏•‡∏î session ‡πÅ‡∏•‡∏∞ branch list
  useEffect(() => {
    const init = async () => {
      const currentUser = await checkSession();
      if (!currentUser) {
        setError("üîí ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà");
        return;
      }

      setUser(currentUser);
      try {
        const res = await getBranches();
        if (res.data.length === 0) {
          throw new Error("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≤‡∏Ç‡∏≤ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏≤‡∏Ç‡∏≤‡∏Å‡πà‡∏≠‡∏ô");
        }
        setBranches(res.data);

        if (!employeeData && currentUser.branch_id) {
          setEmployee(prev => ({ ...prev, branch_id: currentUser.branch_id }));
        }
      } catch (err) {
        console.error("üî¥ Error fetching branches:", err);
        setError(err.message || "‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏Ç‡∏≤‡πÑ‡∏î‡πâ");
      }
    };

    if (show) {
      init();
    }
  }, [show, employeeData]);

  // ‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ employee ‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
  useEffect(() => {
    if (employeeData) {
      setEmployee({ ...employeeData, password: "" });
    } else {
      setEmployee({
        name: "",
        email: "",
        phone: "",
        role: "",
        branch_id: user?.branch_id || "",
        password: ""
      });
    }
  }, [employeeData, user]);

  const handleChange = (e) => {
    setEmployee({ ...employee, [e.target.name]: e.target.value });
  };

  const handleSave = () => {
    if (!employee.name || !employee.email || !employee.phone || !employee.role || !employee.branch_id || (!employeeData && !employee.password)) {
      alert("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô");
      return;
    }

    if (!window.confirm(`‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£${employeeData ? "‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç" : "‡πÄ‡∏û‡∏¥‡πà‡∏°"}‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ô‡∏µ‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?`)) {
      return;
    }

    onSave(employee);
  };

  if (!show) return null;

  return (
    <div className="add-employee-modal-overlay">
      <div className="add-employee-modal-content card p-4 shadow" style={{ backgroundColor: "#fff" }}>
        <h2 className="mb-3 text-start">{employeeData ? "‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô" : "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô"}</h2>

        {error && <p className="alert alert-danger">{error}</p>}

        <div className="mb-2">
          <label className="form-label">‡∏ä‡∏∑‡πà‡∏≠</label>
          <input type="text" name="name" className="form-control" placeholder="‡∏ä‡∏∑‡πà‡∏≠"
            value={employee.name} onChange={handleChange} required />
        </div>

        <div className="mb-2">
          <label className="form-label">‡∏≠‡∏µ‡πÄ‡∏°‡∏•</label>
          <input type="email" name="email" className="form-control" placeholder="‡∏≠‡∏µ‡πÄ‡∏°‡∏•"
            value={employee.email} onChange={handleChange} required />
        </div>

        {!employeeData && (
          <div className="mb-2">
            <label className="form-label">‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô</label>
            <input type="password" name="password" className="form-control"
              value={employee.password} onChange={handleChange} required />
          </div>
        )}

        <div className="mb-2">
          <label className="form-label">‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠</label>
          <input type="text" name="phone" className="form-control" placeholder="‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠"
            value={employee.phone} onChange={handleChange} required />
        </div>

        <div className="mb-2">
          <label className="form-label">‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á</label>
          <select name="role" className="form-control" value={employee.role} onChange={handleChange} required>
            <option value="">-- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á --</option>
            <option value="staff">Staff</option>
            <option value="manager">Manager</option>
            <option value="admin">Admin</option>
          </select>
        </div>

        <div className="mb-2">
          <label className="form-label">‡∏™‡∏≤‡∏Ç‡∏≤</label>
          <select name="branch_id" className="form-control" value={employee.branch_id} onChange={handleChange} required>
            <option value="">-- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏≤‡∏Ç‡∏≤ --</option>
            {branches.map(branch => (
              <option key={branch.id} value={branch.id}>{branch.name}</option>
            ))}
          </select>
        </div>

        <div className="d-flex justify-content-start mt-3 gap-2">
          <button className="btn btn-secondary w-50" onClick={onClose}>‚ùå ‡∏õ‡∏¥‡∏î</button>
          <button className="btn btn-success w-50" onClick={handleSave}>‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å</button>
        </div>
      </div>
    </div>
  );
};

export default AddEmployeeModal;
