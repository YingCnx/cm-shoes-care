import React, { useState, useEffect } from "react";
import "../assets/css/bootstrap.min.css";
import "./AddEmployeeModal.css";
import { getBranches } from "../services/api";
import { jwtDecode } from "jwt-decode"; // ‚úÖ ‡πÉ‡∏ä‡πâ jwtDecode

const AddEmployeeModal = ({ show, onClose, onSave, employeeData }) => {
    const [branches, setBranches] = useState([]);
    const [isSuperAdmin, setIsSuperAdmin] = useState(false);
    const [error, setError] = useState(null); // ‚úÖ State ‡πÄ‡∏Å‡πá‡∏ö Error
    const [employee, setEmployee] = useState({
        name: "",
        email: "",
        phone: "",
        role: "",
        branch_id: "",
        password: "" // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ä‡πà‡∏≠‡∏á‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô
    });

    useEffect(() => {
        const token = localStorage.getItem("token");
        if (!token) {
            console.error("üî¥ No Token Found");
            return;
        }

        try {
            const user = jwtDecode(token);
            setIsSuperAdmin(user.isSuperAdmin);

            if (!user.isSuperAdmin) {
                setEmployee(prevState => ({
                    ...prevState,
                    branch_id: user.branch_id // ‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ branch_id ‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏≤‡∏Ç‡∏≤‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà SuperAdmin
                }));
            } else {
                fetchBranches();
            }
        } catch (error) {
            console.error("üî¥ Error decoding token:", error);
        }
    }, []);

    useEffect(() => {
        if (employeeData) {
            setEmployee({ ...employeeData, password: "" }); // ‚úÖ ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
        } else {
            setEmployee(prevState => ({
                ...prevState,
                name: "",
                email: "",
                phone: "",
                role: "",
                password: ""
            }));
        }
    }, [employeeData]);

    const fetchBranches = async () => {
        try {
            const res = await getBranches();
            if (res.data.length === 0) {
                throw new Error("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≤‡∏Ç‡∏≤ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏≤‡∏Ç‡∏≤‡∏Å‡πà‡∏≠‡∏ô");
            }
            setBranches(res.data);
            setError(null); // ‚úÖ ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå Error ‡∏ñ‡πâ‡∏≤‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
        } catch (error) {
            console.error("üî¥ Error fetching branches:", error);
            setError(error.message || "‚ùå ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏≤‡∏Ç‡∏≤");
        }
    };

    const handleChange = (e) => {
        setEmployee({ ...employee, [e.target.name]: e.target.value });
    };

    const handleSave = () => {
        if (!employee.name || !employee.email || !employee.phone || !employee.role || (!employeeData && !employee.password)) {
            alert("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô");
            return;
        }

        if (!window.confirm(`‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£${employeeData ? "‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç" : "‡πÄ‡∏û‡∏¥‡πà‡∏°"}‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ô‡∏µ‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?`)) {
            return;
        }

        onSave(employee);
    };

    if (!show) return null;

    return (
        <div className="add-employee-modal-overlay">
            <div className="add-employee-modal-content card p-4 card shadow" style={{ backgroundColor: "#fff" }}>
                <h2 className="mb-3 text-start">{employeeData ? "‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô" : "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô"}</h2>

                {error && <p className="alert alert-danger">{error}</p>} {/* ‚úÖ ‡πÅ‡∏™‡∏î‡∏á Error ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ */}

                <div className="mb-2">
                    <label className="form-label">‡∏ä‡∏∑‡πà‡∏≠</label>
                    <input type="text" name="name" className="form-control text-start w-100" placeholder="‡∏ä‡∏∑‡πà‡∏≠"
                        value={employee.name} onChange={handleChange} required />
                </div>

                <div className="mb-2">
                    <label className="form-label">‡∏≠‡∏µ‡πÄ‡∏°‡∏•</label>
                    <input type="email" className="form-control text-start w-100" placeholder="‡∏≠‡∏µ‡πÄ‡∏°‡∏•"
                        name="email" value={employee.email} onChange={handleChange} required />
                </div>

                {!employeeData && (
                    <div className="mb-2">
                        <label className="form-label">‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô</label>
                        <input className="form-control text-start w-100" type="password" name="password"
                            value={employee.password} onChange={handleChange} required />
                    </div>
                )}

                <div className="mb-2">
                    <label className="form-label">‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠</label>
                    <input type="text" className="form-control text-start w-100" placeholder="‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠"
                        name="phone" value={employee.phone} onChange={handleChange} required />
                </div>

                <div className="mb-2">
                    <label className="form-label">‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á</label>
                    <select className="form-control text-start w-100" name="role" value={employee.role} onChange={handleChange} required>
                        <option value="">-- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á --</option>
                        <option value="staff">Staff</option>
                        <option value="manager">Manager</option>
                        <option value="admin">Admin</option>
                    </select>
                </div>

                {/* ‚úÖ ‡πÅ‡∏™‡∏î‡∏á dropdown ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏≤‡∏Ç‡∏≤‡πÄ‡∏â‡∏û‡∏≤‡∏∞ SuperAdmin ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô */}
                {isSuperAdmin && (
                    <div className="mb-2">
                        <label className="form-label">‡∏™‡∏≤‡∏Ç‡∏≤</label>
                        <select className="form-control text-start w-100" name="branch_id" value={employee.branch_id} onChange={handleChange} required>
                            <option value="">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏≤‡∏Ç‡∏≤</option>
                            {branches.map(branch => (
                                <option key={branch.id} value={branch.id}>{branch.name}</option>
                            ))}
                        </select>
                    </div>
                )}

                <div className="d-flex justify-content-start mt-3 gap-2">
                    <button className="btn btn-secondary w-50" onClick={onClose}>
                        ‚ùå ‡∏õ‡∏¥‡∏î
                    </button>
                    <button className="btn btn-success w-50" onClick={handleSave}>
                        ‚úÖ {employeeData ? "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å" : "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å"}
                    </button>
                </div>
            </div>
        </div>
    );
};

export default AddEmployeeModal;
