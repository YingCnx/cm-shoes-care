import React, { useState, useEffect } from "react";
import "../assets/css/bootstrap.min.css";
import "./UpdateQueueStatusModal.css";
import { createAppointment } from "../services/api"; // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° import ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢

const UpdateQueueStatusModal = ({
  show,
  handleClose,
  handleUpdate,
  queueId,
  currentStatus,
  totalPrice,
  queue,
}) => {
  const statusMap = {
    "": "‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤",
    "‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤": "‡∏≠‡∏¢‡∏π‡πà‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î",
    "‡∏≠‡∏¢‡∏π‡πà‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î": "‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏™‡πà‡∏á",
    "‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏™‡πà‡∏á": "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏±‡∏î‡∏™‡πà‡∏á",
    "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏±‡∏î‡∏™‡πà‡∏á": "‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
  };

  const newStatus = statusMap[currentStatus] || currentStatus;
  const [status, setStatus] = useState(newStatus);
  const [price, setPrice] = useState(parseFloat(totalPrice).toFixed(2));

  const [deliveryMethod, setDeliveryMethod] = useState("");
  const [deliveryLocation, setDeliveryLocation] = useState("");

   const [appointmentDate, setAppointmentDate] = useState(() => {
          const tomorrow = new Date();
          tomorrow.setDate(tomorrow.getDate());
          return tomorrow.toISOString().split('T')[0];
      });
      const [appointmentTime, setAppointmentTime] = useState('10:00');

  useEffect(() => {
    setStatus(newStatus);
    setPrice(parseFloat(totalPrice).toFixed(2));
  }, [currentStatus, totalPrice]);

  useEffect(() => {
    if (status === "‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏™‡πà‡∏á" && queue) {
      const loc = queue.location || "";
      const src = queue.source || "";

      if (src === "locker") {
        setDeliveryMethod("Locker");
      } else if (loc === "Walk-in") {
        setDeliveryMethod("Walk-in");
      } else {
        setDeliveryMethod("Delivery");
        setDeliveryLocation(loc);
      }
    }
  }, [status, queue]);

  const handleSubmit = async () => {
    if (!window.confirm(`‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô "${status}" ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?`)) return;

    const totalQueuePrice = parseFloat(price) || 0;
    if (totalQueuePrice === 0) {
      alert("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡πà‡∏≠‡∏ô‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞!");
      return;
    }

    let deliveryData = {};
    if (status === "‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏™‡πà‡∏á") {
      if (deliveryMethod === "Delivery") {
        if (!appointmentDate || !appointmentTime || !deliveryLocation) {
          alert("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà, ‡πÄ‡∏ß‡∏•‡∏≤ ‡πÅ‡∏•‡∏∞‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö");
          return;
        }
      }

      deliveryData = {
        deliveryMethod,
        appointmentDate,
        appointmentTime,
        deliveryLocation,
      };
    }

    // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏¥‡∏ß
    await handleUpdate(queueId, status, totalQueuePrice, deliveryData);

    // ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢ ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô Delivery
    if (status === "‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏™‡πà‡∏á" && deliveryMethod === "Delivery" && queue) {
      const appointmentPayload = {
        customer_id: queue.customer_id,
        customer_name: queue.customer_name,
        phone: queue.phone,
        location: deliveryLocation,
        shoe_count: queue.total_pairs || 1,
        appointment_date: appointmentDate,
        appointment_time: appointmentTime,
        branch_id: queue.branch_id,
        appointment_type: "delivery",
        queue_id: queue.id,
      };

      try {
        //console.log("dt",appointmentPayload);
        await createAppointment(appointmentPayload);
        alert("‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");
      } catch (error) {
        console.error("üî¥ Error creating delivery appointment:", error);
        alert("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡πÑ‡∏î‡πâ");
      }
    }

    if (status === "‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏™‡πà‡∏á") {
      alert("‚ÄºÔ∏è ‡∏≠‡∏¢‡πà‡∏≤‡∏•‡∏∑‡∏°‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ After ‡∏ô‡∏∞‡∏Ñ‡∏∞");
    }

    handleClose();
  };

  if (!show) return null;

  const isLocker = queue?.source === "locker";

  return (
    <div className="update-queues-modal-overlay">
      <div className="update-queues-modal-content card p-4 shadow" style={{ backgroundColor: "#fff" }}>
        <h2 className="text-center mb-3">üîÑ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏¥‡∏ß</h2>

        <div className="mb-3">
          <label className="form-label">‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏¥‡∏ß‡πÄ‡∏õ‡πá‡∏ô</label>
          <select className="form-select" value={status} onChange={(e) => setStatus(e.target.value)}>
            {[...new Set(Object.values(statusMap))].map((value) => (
              <option key={value} value={value}>{value}</option>
            ))}
          </select>
          </div>
        {status === "‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏™‡πà‡∏á" && (
          <div className="mb-3">
            <label className="form-label">üì¶ ‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á‡∏à‡∏±‡∏î‡∏™‡πà‡∏á</label>
            <select
              className="form-select"
              value={deliveryMethod}
              onChange={(e) => setDeliveryMethod(e.target.value)}
              disabled={isLocker} // üîí ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô locker ‡∏´‡πâ‡∏≤‡∏°‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô
            >
              <option value="Walk-in">Walk-in</option>
              <option value="Delivery">‡∏ô‡∏±‡∏î‡∏™‡πà‡∏á</option>

              {/* ‚úÖ ‡πÅ‡∏™‡∏î‡∏á Locker ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Å‡∏£‡∏ì‡∏µ‡∏°‡∏≤‡∏à‡∏≤‡∏Å locker ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô */}
              {isLocker && <option value="Locker">Locker</option>}
            </select>

            {/* üéØ ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ Delivery: ‡πÅ‡∏™‡∏î‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏ô‡∏±‡∏î‡∏™‡πà‡∏á */}
            {deliveryMethod === "Delivery" && (
              <div className="mt-3">
                <label className="form-label">üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏±‡∏î‡∏™‡πà‡∏á</label>
                <input type="date" className="form-control" value={appointmentDate} onChange={(e) => setAppointmentDate(e.target.value)} />
                <label className="form-label mt-2">‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏±‡∏î‡∏™‡πà‡∏á</label>
                <input type="time" className="form-control" value={appointmentTime} onChange={(e) => setAppointmentTime(e.target.value)} />
                <label className="form-label mt-2">üìç ‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏±‡∏î‡∏™‡πà‡∏á</label>
                <input type="text" className="form-control" value={deliveryLocation} onChange={(e) => setDeliveryLocation(e.target.value)} />
              </div>
            )}

            {/* ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Å‡∏£‡∏ì‡∏µ Locker */}
            {deliveryMethod === "Locker" && isLocker && (
              <div className="mt-3 text-muted">
                ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏π‡πâ Locker ‡πÅ‡∏•‡∏∞‡∏ä‡πà‡∏≠‡∏á‡πÉ‡∏´‡πâ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
              </div>
            )}
          </div>
        )}

        <div className="modal-actions mt-4">
          <button className="btn btn-success" onClick={handleSubmit}>‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å</button>
          <button className="btn btn-danger me-2" onClick={handleClose}>‚ùå ‡∏õ‡∏¥‡∏î</button>
        </div>
      </div>
    </div>
  );
};

export default UpdateQueueStatusModal;
