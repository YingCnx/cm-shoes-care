import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { loginEmployee } from '../services/api';
import { jwtDecode } from 'jwt-decode';
import Input from '../components/ui/input';   
import Button from '../components/ui/button'; 
import { Card, CardContent, CardHeader, CardTitle } from '../components/ui/card';
import { Lock, Mail } from 'lucide-react';
import '../styles/Login.css';

const EmployeeLogin = () => {
    const [email, setEmail] = useState("");
    const [password, setPassword] = useState("");
    const [error, setError] = useState(""); // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° state ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö error
    const navigate = useNavigate();

    useEffect(() => {
      const token = localStorage.getItem("token");
      if (token) {
          try {
              const user = jwtDecode(token);
              console.log("‚úÖ User Logged in:", user);
              navigate("/dashboard"); // ‚úÖ Redirect ‡πÑ‡∏õ Dashboard
          } catch (error) {
              console.error("üî¥ Error decoding token:", error);
              localStorage.removeItem("token"); // ‚úÖ ‡∏•‡πâ‡∏≤‡∏á Token ‡∏ñ‡πâ‡∏≤‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ
          }
      }
  }, [navigate]);

    const handleLogin = async (e) => {
        e.preventDefault();
        try {
            const response = await loginEmployee(email, password);
            
            // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ Token ‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            if (!response.data.token) {
                throw new Error("‡πÑ‡∏°‡πà‡∏û‡∏ö Token ‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå");
            }
    
            // ‚úÖ ‡πÄ‡∏Å‡πá‡∏ö Token ‡πÅ‡∏•‡∏∞ Role
            localStorage.setItem("token", response.data.token);
            localStorage.setItem("role", response.data.role);
    
            navigate("/dashboard"); // ‚úÖ ‡πÑ‡∏õ‡∏ó‡∏µ‡πà Dashboard ‡∏´‡∏•‡∏±‡∏á Login
        } catch (err) {
            setError(err?.response?.data?.message || "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô");
        }
    };
    

  return (
    <div className="login-container">
      <div className="login-card">
        <Card className="login-card-content">
          <CardHeader>
            <CardTitle className="login-title">üîë Employee Login</CardTitle>
          </CardHeader>
          <CardContent>
            {error && <p className="error-message">{error}</p>} {/* ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° Error */}
            <form onSubmit={handleLogin} className="login-form">
              <div className="input-group">
                <Mail className="input-icon" size={20} />
                <Input 
                  type="email" 
                  placeholder="Email" 
                  value={email} 
                  onChange={(e) => setEmail(e.target.value)} 
                  required 
                  className="input-field"
                />
              </div>
              <div className="input-group">
                <Lock className="input-icon" size={20} />
                <Input 
                  type="password" 
                  placeholder="Password" 
                  value={password} 
                  onChange={(e) => setPassword(e.target.value)} 
                  required 
                  className="input-field"
                />
              </div>
              <div className="button-container">
                <Button type="submit" className="login-button">Login</Button>
              </div>
            </form>
          </CardContent>
        </Card>
      </div>
    </div>
  );
};

export default EmployeeLogin;
