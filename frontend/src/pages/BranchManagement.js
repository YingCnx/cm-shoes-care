import React, { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import { getBranches, createBranch, updateBranch, deleteBranch } from "../services/api";
import { jwtDecode } from "jwt-decode";  // ‚úÖ ‡πÉ‡∏ä‡πâ jwtDecode ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå
import AddBranchModal from "../components/AddBranchModal";
import "./BranchManagement.css";
import "../assets/css/bootstrap.min.css";

const BranchManagement = () => {
    const navigate = useNavigate();
    const [branches, setBranches] = useState([]);
    const [showAddModal, setShowAddModal] = useState(false);
    const [editBranch, setEditBranch] = useState(null);
    const [isSuperAdmin, setIsSuperAdmin] = useState(false);

    useEffect(() => {
        const token = localStorage.getItem("token");
        if (!token) {
            navigate("/login"); // ‚úÖ ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ token ‡πÉ‡∏´‡πâ‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ Login
            return;
        }

        try {
            const user = jwtDecode(token);
            setIsSuperAdmin(user.isSuperAdmin); // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô SuperAdmin ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà

            if (user.isSuperAdmin) {
                fetchBranches(); // ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡πá‡∏ô SuperAdmin
            } else {
                navigate("/dashboard"); // ‚úÖ ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà SuperAdmin ‡πÉ‡∏´‡πâ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ Dashboard
            }
        } catch (error) {
            console.error("üî¥ Error decoding token:", error);
            navigate("/login"); // ‚úÖ ‡∏´‡∏≤‡∏Å decode token ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏´‡πâ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ Login
        }
    }, []);

    const fetchBranches = async () => {
        try {
            const res = await getBranches();
            console.log("üìå Debug: Branches Data", res.data);
            setBranches(res.data || []);
        } catch (error) {
            console.error("üî¥ Error fetching branches:", error);
        }
    };

    const handleCreateOrUpdateBranch = async (branchData) => {
        try {
            if (branchData.id) {
                await updateBranch(branchData.id, branchData);
            } else {
                await createBranch(branchData);
            }
            fetchBranches();
            setShowAddModal(false);
            setEditBranch(null);
        } catch (error) {
            console.error("üî¥ Error saving branch:", error);
        }
    };

    const handleDelete = async (id) => {
        if (!window.confirm("‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏™‡∏≤‡∏Ç‡∏≤‡∏ô‡∏µ‡πâ?")) return;
    
        try {
            await deleteBranch(id);
            fetchBranches();
            alert("‚úÖ ‡∏•‡∏ö‡∏™‡∏≤‡∏Ç‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");
        } catch (error) {
            console.error("üî¥ Error deleting branch:", error.response?.data || error.message);
            alert(`‚ùå ${error.response?.data?.message || "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏™‡∏≤‡∏Ç‡∏≤‡πÑ‡∏î‡πâ"}`);
        }
    };

    if (!isSuperAdmin) {
        return null; // ‚úÖ ‡∏ã‡πà‡∏≠‡∏ô UI ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà SuperAdmin
    }

    return (
        <div className="branch-container">
            <h2>üè¢ ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏≤‡∏Ç‡∏≤</h2>
            <div className="d-flex justify-content-between align-items-center mb-3">
                <button className="btn btn-secondary" onClick={() => navigate("/dashboard")}>
                    ‚¨ÖÔ∏è ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ Dashboard
                </button>
                <button className="btn btn-primary" onClick={() => setShowAddModal(true)}>
                    ‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏≤‡∏Ç‡∏≤
                </button>
            </div>

            {/* ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏™‡∏≤‡∏Ç‡∏≤ */}
            <table className="table table-bordered table-striped">
                <thead className="table-dark">
                    <tr>
                        <th>‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏Ç‡∏≤</th>
                        <th>‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà</th>
                        <th>‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠</th>
                        <th>‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£</th>
                    </tr>
                </thead>
                <tbody>
                    {branches.map(branch => (
                        <tr key={branch.id}>
                            <td>{branch.name}</td>
                            <td>{branch.location}</td>
                            <td>{branch.phone}</td>
                            <td>
                                <button className="btn btn-warning btn-sm" onClick={() => { setEditBranch(branch); setShowAddModal(true); }}>‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç</button>
                                <button className="btn btn-danger btn-sm ms-2" onClick={() => handleDelete(branch.id)}>‚ùå ‡∏•‡∏ö</button>
                            </td>
                        </tr>
                    ))}
                </tbody>
            </table>

            {/* ‡πÅ‡∏™‡∏î‡∏á Modal ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏≤‡∏Ç‡∏≤" ‡∏´‡∏£‡∏∑‡∏≠ "‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏™‡∏≤‡∏Ç‡∏≤" */}
            {showAddModal && (
                <AddBranchModal
                    show={showAddModal}
                    onClose={() => { setShowAddModal(false); setEditBranch(null); }}
                    onSave={handleCreateOrUpdateBranch}
                    branchData={editBranch}
                />
            )}
        </div>
    );
};

export default BranchManagement;
