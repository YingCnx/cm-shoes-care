import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { getQueue, updateQueueStatus, deleteQueue, generateInvoice, getBranches } from '../services/api';
import { jwtDecode } from "jwt-decode";
import './QueueAdmin.css';

const QueueAdmin = () => {
    const navigate = useNavigate();
    const [queue, setQueue] = useState([]);
    const [filteredQueue, setFilteredQueue] = useState([]);
    const [statusFilter, setStatusFilter] = useState(['‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤', '‡∏≠‡∏¢‡∏π‡πà‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î','‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏™‡πà‡∏á','‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏±‡∏î‡∏™‡πà‡∏á','‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à']);
    const [branches, setBranches] = useState([]);
    const [selectedBranch, setSelectedBranch] = useState(null);
    const [isSuperAdmin, setIsSuperAdmin] = useState(false);

    const Backend_URL = 'http://localhost:5000'; // ‡∏î‡∏∂‡∏á URL Backend

    // ‚úÖ ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Ç‡∏≠‡∏á‡∏ä‡πà‡∏ß‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà (‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏µ‡πà‡∏õ‡∏µ‡∏ô‡∏µ‡πâ)
    const today = new Date();
    const firstDayOfYear = new Date(today.getFullYear(), 0, 1).toISOString().split('T')[0];
    const lastDayOfMonth = new Date(today.getFullYear(), today.getMonth() + 1, 0).toISOString().split('T')[0];

    const [startDate, setStartDate] = useState(firstDayOfYear);
    const [endDate, setEndDate] = useState(lastDayOfMonth);

    const [invoiceUrl, setInvoiceUrl] = useState(null);
    const [showInvoiceModal, setShowInvoiceModal] = useState(false);

    

    useEffect(() => {
        const token = localStorage.getItem('token');
        if (!token) {
            navigate('/login');
            return;
        }

        try {
            const user = jwtDecode(token);
            setIsSuperAdmin(user.isSuperAdmin);
            setSelectedBranch(user.isSuperAdmin ? null : user.branch_id);

            if (user.isSuperAdmin) {
                fetchBranches();
            } else {
                fetchQueue(user.branch_id);
            }
        } catch (error) {
            console.error("üî¥ Error decoding token:", error);
            navigate("/login");
        }
    }, []);

    useEffect(() => {
        if (selectedBranch !== null) {
            fetchQueue(selectedBranch);
        }
    }, [selectedBranch, startDate, endDate]);

    useEffect(() => {
        filterQueueData();
    }, [queue, statusFilter, startDate, endDate]);

    const fetchBranches = async () => {
        try {
            const res = await getBranches();
            setBranches(res.data);
        } catch (error) {
            console.error("üî¥ Error fetching branches:", error);
        }
    };

    const fetchQueue = async (branchId) => {
        try {
            const res = await getQueue(branchId);
            setQueue(res.data);
        } catch (error) {
            console.error("üî¥ Error fetching queue:", error);
        }
    };

    const filterQueueData = () => {
        const filtered = queue.filter(item =>
            statusFilter.includes(item.status) &&
            new Date(item.received_date) >= new Date(startDate) &&
            new Date(item.received_date) <= new Date(endDate)
        ).sort((a, b) => new Date(a.received_date) - new Date(b.received_date));

        setFilteredQueue(filtered);
    };

    const handleBranchChange = (e) => {
        setSelectedBranch(e.target.value);
    };

    // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏à‡πâ‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤
    const handleGenerateInvoice = async (queue_id) => {
        try {
            const res = await generateInvoice(queue_id);
            setInvoiceUrl(res.data.image_url); // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï URL ‡∏Ç‡∏≠‡∏á‡πÉ‡∏ö‡πÅ‡∏à‡πâ‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤
            console.log("URL",res.data.image_url);
            setShowInvoiceModal(true); // ‚úÖ ‡πÄ‡∏õ‡∏¥‡∏î Modal
        } catch (error) {
            console.error("üî¥ Error generating invoice:", error);
            alert("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ö‡πÅ‡∏à‡πâ‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡πÑ‡∏î‡πâ");
        }
    };

    return (
        <div className="queue-container">
            <h2>üìã ‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡∏¥‡∏ß‡∏á‡∏≤‡∏ô</h2>
            <div className="d-flex justify-content-between align-items-center mb-3">
                <button onClick={() => navigate('/dashboard')}>‚¨ÖÔ∏è ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ Dashboard</button>
                <button onClick={() => navigate('/queue-entry')}>üÜï ‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà</button>
            </div>

            {/* ‚úÖ ‡πÅ‡∏™‡∏î‡∏á dropdown ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö SuperAdmin */}
            {isSuperAdmin && (
                <div className="mb-3 ">
                    <label className="form-label">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏≤‡∏Ç‡∏≤</label>
                    <select className="form-control" value={selectedBranch || ''} onChange={handleBranchChange}>
                        <option value="">-- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏≤‡∏Ç‡∏≤ --</option>
                        {branches.map(branch => (
                            <option key={branch.id} value={branch.id}>{branch.name}</option>
                        ))}
                    </select>
                </div>
            )}

            {/* ‚úÖ ‡∏ü‡∏¥‡∏•‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ä‡πà‡∏ß‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà */}
            <div className="date-filters d-flex align-items-center gap-2 mb-3">
                <label>üìÖ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤ ‡∏à‡∏≤‡∏Å:</label>
                <input type="date" className="form-control" value={startDate} onChange={(e) => setStartDate(e.target.value)} />
                <label>‡∏ñ‡∏∂‡∏á:</label>
                <input type="date" className="form-control" value={endDate} onChange={(e) => setEndDate(e.target.value)} />
            </div>

            {/* ‚úÖ ‡∏ü‡∏¥‡∏•‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ */}
            <div className="filters d-flex flex-wrap gap-2 justify-content-start">
            ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ :
                {['‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤', '‡∏≠‡∏¢‡∏π‡πà‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î', '‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏™‡πà‡∏á', '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏±‡∏î‡∏™‡πà‡∏á', '‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à'].map(status => (
                    <div key={status} className="form-check d-flex align-items-center gap-1">
                        <input
                            type="checkbox"
                            className="form-check-input"
                            checked={statusFilter.includes(status)}
                            onChange={() => setStatusFilter(prev => prev.includes(status) ? prev.filter(s => s !== status) : [...prev, status])}
                        />
                        <label className="form-check-label">{status}</label>
                    </div>
                ))}
            </div>

            {/* ‚úÖ ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏¥‡∏ß */}
            <table className="table table-striped">
                <thead className="table-dark">
                    <tr>
                        <th>‡∏ä‡∏∑‡πà‡∏≠</th>
                        <th>‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà</th>
                        <th>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏π‡πà</th>
                        <th>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô</th>
                        <th>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤</th>
                        <th>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏Ñ‡∏∑‡∏ô</th>
                        <th>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</th>
                        <th>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô</th>
                        <th>‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î</th>
                        <th>‡πÉ‡∏ö‡πÅ‡∏à‡πâ‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤</th>
                    </tr>
                </thead>
                <tbody>
                    {filteredQueue.map(item => (
                        <tr key={item.queue_id}>
                            <td>{item.customer_name}</td>
                            <td>{item.location}</td>
                            <td>{item.total_pairs}</td>
                            <td>{item.total_price}</td>
                            <td>{new Date(item.received_date).toLocaleDateString()}</td>
                            <td>{new Date(item.delivery_date).toLocaleDateString()}</td>
                            <td>{item.status}</td>
                            <td>{item.payment_status}</td>
                            <td><button className="btn btn-info btn-sm" onClick={() => navigate(`/queue/${item.queue_id}/detail`)}>‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î</button></td>
                            <td><button className="btn btn-success btn-sm" onClick={() => handleGenerateInvoice(item.queue_id)}>‡πÉ‡∏ö‡πÅ‡∏à‡πâ‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤</button></td>
                        </tr>
                    ))}
                </tbody>
            </table>
             {/* ‚úÖ Modal ‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ö‡πÅ‡∏à‡πâ‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤ */}
             {showInvoiceModal && (
                <div className="modal-overlay">
                    <div className="modal-content">
                        <h2>üìú ‡πÉ‡∏ö‡πÅ‡∏à‡πâ‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤</h2>
                        {invoiceUrl ? (
                            <img src={invoiceUrl} alt="Invoice" style={{ width: "100%", borderRadius: "10px" }} />
                        ) : (
                            <p>‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏ö‡πÅ‡∏à‡πâ‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤...</p>
                        )}
                        <button onClick={() => setShowInvoiceModal(false)}>‚ùå ‡∏õ‡∏¥‡∏î</button>
                    </div>
                </div>
            )}
        </div>
    );
};

export default QueueAdmin;
