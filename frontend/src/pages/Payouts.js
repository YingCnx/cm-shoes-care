import React, { useState, useEffect } from "react";
import { getPayouts, createPayout, updatePayout, deletePayout, getBranches } from "../services/api";
import { jwtDecode } from "jwt-decode"; 
import "bootstrap/dist/css/bootstrap.min.css";

const THAI_MONTHS = [
    "‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏°", "‡∏Å‡∏∏‡∏°‡∏†‡∏≤‡∏û‡∏±‡∏ô‡∏ò‡πå", "‡∏°‡∏µ‡∏ô‡∏≤‡∏Ñ‡∏°", "‡πÄ‡∏°‡∏©‡∏≤‡∏¢‡∏ô", "‡∏û‡∏§‡∏©‡∏†‡∏≤‡∏Ñ‡∏°", "‡∏°‡∏¥‡∏ñ‡∏∏‡∏ô‡∏≤‡∏¢‡∏ô",
    "‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏°", "‡∏™‡∏¥‡∏á‡∏´‡∏≤‡∏Ñ‡∏°", "‡∏Å‡∏±‡∏ô‡∏¢‡∏≤‡∏¢‡∏ô", "‡∏ï‡∏∏‡∏•‡∏≤‡∏Ñ‡∏°", "‡∏û‡∏§‡∏®‡∏à‡∏¥‡∏Å‡∏≤‡∏¢‡∏ô", "‡∏ò‡∏±‡∏ô‡∏ß‡∏≤‡∏Ñ‡∏°"
];

const Payouts = () => {
    const today = new Date();
    const currentYear = today.getFullYear();
    const currentMonth = today.getMonth() + 1;

    const [payouts, setPayouts] = useState([]);
    const [branches, setBranches] = useState([""]);
    const [selectedYear, setSelectedYear] = useState(currentYear);
    const [selectedMonth, setSelectedMonth] = useState(currentMonth);
    const [selectedBranch, setSelectedBranch] = useState("");
    const [isSuperAdmin, setIsSuperAdmin] = useState(false);
    const [employeeId, setemployeeId] = useState(null);
    const [loading, setLoading] = useState(false);
    const [showModal, setShowModal] = useState(false);

    const [form, setForm] = useState({
        id: null,
        payout_type: "",
        description: "",
        amount: "",
        notes: "",
        payout_date: "",
        branch_id: "",
        employee_id: null,
    });

    const formatDate = (dateString) => {
        const date = new Date(dateString);
        date.setMinutes(date.getMinutes() - date.getTimezoneOffset()); // ‡∏õ‡∏£‡∏±‡∏ö TimeZone Offset
        return date.toISOString().split("T")[0]; // ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô YYYY-MM-DD
    };
    const years = Array.from({ length: 6 }, (_, i) => currentYear - i);

    useEffect(() => {
        const token = localStorage.getItem("token");
        if (!token) return;

        try {
            const user = jwtDecode(token);
          
            setIsSuperAdmin(user.isSuperAdmin);
            setSelectedBranch(user.isSuperAdmin ? "" : user.branch_id); 
            setemployeeId(user.id ?? null); 

            if (user.isSuperAdmin) fetchBranches();
        } catch (error) {
            console.error("üî¥ Error decoding token:", error);
        }
    }, []);

    useEffect(() => {
        if (selectedBranch || !isSuperAdmin) {
            fetchPayouts();
        }
    }, [selectedYear, selectedMonth, selectedBranch]);

    const fetchBranches = async () => {
        try {
            const res = await getBranches();
            setBranches(res.data);
        } catch (error) {
            console.error("üî¥ Error fetching branches:", error);
        }
    };

    const fetchPayouts = async () => {
        if (!selectedBranch) return; // ‚úÖ ‡πÑ‡∏°‡πà‡πÇ‡∏´‡∏•‡∏î‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó   
        try {
            setLoading(true);
            const startDate = `${selectedYear}-${String(selectedMonth).padStart(2, "0")}-01`;
            const endDate = new Date(selectedYear, selectedMonth, 1).toISOString().split("T")[0];

            //console.log(`üìå Fetching Payouts for: ${selectedYear} ${THAI_MONTHS[selectedMonth - 1]} (${startDate} to ${endDate})`);

            const res = await getPayouts({
                start_date: startDate,
                end_date: endDate,
                branch_id: selectedBranch || null, // ‡∏™‡πà‡∏á branch_id ‡πÑ‡∏õ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ñ‡πâ‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
            });

            setPayouts(res.data);
        } catch (error) {
            console.error("üî¥ Error fetching payouts:", error);
        } finally {
            setLoading(false);
        }
    };

    const handleSubmit = async (e) => {
        e.preventDefault();
        try {
                  // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ó‡∏∏‡∏Å‡∏ä‡πà‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏ñ‡∏π‡∏Å‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô
        if (!form.payout_type || !form.description || !form.amount || !form.payout_date) {
            alert(selectedBranch);
            alert("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô ‡∏£‡∏ß‡∏°‡∏ñ‡∏∂‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏á‡∏¥‡∏ô!");
            return;
        }

        // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡πà‡∏≤‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç ‡πÅ‡∏•‡∏∞‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 0
        if (isNaN(form.amount) || parseFloat(form.amount) <= 0) {
            alert("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á!");
            return;
        }

            const payload = {
                ...form,
                branch_id: isSuperAdmin ? form.branch_id : selectedBranch,
                employee_id: employeeId,
            };

            //console.log("form data:",form);

            const confirmSave = window.confirm(form.id 
                ? `üìå ‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢ "${form.description}" ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?`
                : `üìå ‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢ "${form.description}" ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?`);
            
            if (!confirmSave) return;

            if (form.id) {
                await updatePayout(form.id, payload);
                alert("‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢!");
            } else {
                await createPayout(payload);
                alert("‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢!");
            }

            fetchPayouts();
            setShowModal(false);
            setForm({ id: null, payout_type: "", description: "", amount: "", notes: "", payout_date: "", branch_id: "" });
        } catch (error) {
            console.error("üî¥ Error saving payout:", error);
        }
    };

    const handleDelete = async (id) => {
        if (window.confirm("‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ?")) {
            try {
                await deletePayout(id);
                alert("‚úÖ ‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢!");
                fetchPayouts();
                setForm({ id: null, payout_type: "", description: "", amount: "", notes: "", payout_date: "", branch_id: "" });
            } catch (error) {
                console.error("üî¥ Error deleting payout:", error);
            }
        }
    };

    const totalAmount = payouts.reduce((sum, payout) => sum + parseFloat(payout.amount || 0), 0);

    return (
        <div className="container mt-4">
            <h1>üìâ ‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢</h1>
            <button className="btn btn-primary mb-3"  onClick={() => {
                    setForm({
                        id: null,
                        payout_type: "",
                        description: "",
                        amount: "",
                        notes: "",
                        payout_date: "",
                        branch_id: "",
                        employee_id: null,
                    }); // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Ñ‡πà‡∏≤ form ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
                    setShowModal(true);
                }}>‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢</button>

            <div className="card p-3 mb-3 shadow">
                <div className="row">
                    {isSuperAdmin && (
                        <div className="col-md-3">
                            <label className="form-label">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏≤‡∏Ç‡∏≤</label>
                            <select className="form-select" value={selectedBranch} onChange={(e) => setSelectedBranch(e.target.value)}>
                                <option value="">-- ‡∏ó‡∏∏‡∏Å‡∏™‡∏≤‡∏Ç‡∏≤ --</option>
                                {branches.map(branch => (
                                    <option key={`branch-${branch.id}`} value={branch.id}>{branch.name}</option>
                                ))}
                            </select>
                        </div>
                    )}

                    <div className="col-md-3">
                        <label className="form-label">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏µ</label>
                        <select className="form-select" value={selectedYear} onChange={(e) => setSelectedYear(Number(e.target.value))}>
                            {years.map((year) => (
                                <option key={year} value={year}>{year}</option>
                            ))}
                        </select>
                    </div>

                    <div className="col-md-3">
                        <label className="form-label">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏î‡∏∑‡∏≠‡∏ô</label>
                        <select className="form-select" value={selectedMonth} onChange={(e) => setSelectedMonth(Number(e.target.value))}>
                            {THAI_MONTHS.map((month, index) => (
                                <option key={`month-${index}`} value={index + 1}>
                                    {month}
                                </option>
                            ))}
                        </select>
                    </div>

                    <div className="col-md-2 d-flex align-items-end">
                        <button className="btn btn-primary w-100" onClick={fetchPayouts}>
                            üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
                        </button>
                    </div>
                </div>
            </div>

            <div className="card p-3 shadow">
                <h5>üìã ‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢ ‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡πÄ‡∏î‡∏∑‡∏≠‡∏ô {THAI_MONTHS[selectedMonth - 1]} {selectedYear}</h5>
                {loading ? (
                    <div className="text-center py-3">‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...</div>
                ) : (
                    <table className="table table-hover">
                    <thead className="table-dark">
                        <tr>
                            <th>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà</th>
                            <th>‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó</th>
                            <th>‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î</th>
                            <th>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô</th>
                        </tr>
                    </thead>
                    <tbody>
                        {payouts.length > 0 ? (
                            payouts.map((payout) => (
                                <tr 
                                    key={`payout-${payout.id}`} 
                                    onClick={() => {
                                        setForm(payout);
                                        setShowModal(true);
                                    }}
                                    style={{ cursor: "pointer" }}
                                >
                                    <td>{new Date(payout.payout_date).toLocaleDateString()}</td>
                                    <td>{payout.payout_type}</td>
                                    <td>{payout.description}</td>
                                    <td>{parseFloat(payout.amount).toLocaleString("th-TH", { minimumFractionDigits: 2 })} ‡∏ø</td>
                                </tr>
                            ))
                        ) : (
                            <tr>
                                <td colSpan="4" className="text-center text-muted">‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢</td>
                            </tr>
                        )}
                    </tbody>
                    {payouts.length > 0 && (
                        <tfoot>
                            <tr className="table-dark">
                                <td colSpan="3" className="text-end fw-bold">‡∏£‡∏ß‡∏°</td>
                                <td className="fw-bold">{parseFloat(totalAmount).toLocaleString("th-TH", { minimumFractionDigits: 2 })} ‡∏ø</td>
                            </tr>
                        </tfoot>
                    )}
                </table>
                )}
            </div>
            {showModal && (
                <div className="modal show d-block" tabIndex="-1">
                    <div className="modal-dialog">
                        <div className="modal-content">
                            <div className="modal-header">
                                <h4 className="modal-title">{form.id ? "üîÑ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢" : "‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢"}</h4>
                                <button type="button" className="btn-close" onClick={() => setShowModal(false)}></button>
                            </div>
                            <div className="modal-body">
                                <form onSubmit={handleSubmit}>
                                    {/* ‚úÖ ‡∏´‡∏≤‡∏Å‡πÄ‡∏õ‡πá‡∏ô SuperAdmin ‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏≤‡∏Ç‡∏≤ */}
                                    {isSuperAdmin && !form.id && (
                                        <div className="mb-3">
                                            <label className="form-label">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏≤‡∏Ç‡∏≤</label>
                                            <select 
                                                className="form-control" 
                                                value={form.branch_id} 
                                                onChange={(e) => setForm({ ...form, branch_id: e.target.value })} 
                                                required
                                            >
                                                <option value="">-- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏≤‡∏Ç‡∏≤ --</option>
                                                {branches.map(branch => (
                                                    <option key={branch.id} value={branch.id}>{branch.name}</option>
                                                ))}
                                            </select>
                                        </div>
                                    )}

                                    {/* ‚úÖ ‡∏´‡∏≤‡∏Å‡πÄ‡∏õ‡πá‡∏ô Employee ‡πÉ‡∏´‡πâ‡∏Å‡∏≥‡∏´‡∏ô‡∏î branch_id ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ */}
                                    {!isSuperAdmin && !form.id && (
                                        <input type="hidden" value={selectedBranch} readOnly />
                                    )}

                                    <div className="mb-3">
                                        <label className="form-label">‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó</label>
                                        <select className="form-control" value={form.payout_type} onChange={(e) => setForm({ ...form, payout_type: e.target.value })} required>
                                            <option value="">-- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó --</option>
                                            <option value="‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô">‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô</option>
                                            <option value="‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå-‡∏ô‡πâ‡∏≥‡∏¢‡∏≤">‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå-‡∏ô‡πâ‡∏≥‡∏¢‡∏≤</option>
                                            <option value="‡∏≠‡∏∑‡πà‡∏ô‡πÜ">‡∏≠‡∏∑‡πà‡∏ô‡πÜ</option>
                                        </select>
                                    </div>

                                    <div className="mb-3">
                                        <label className="form-label">‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î</label>
                                        <input type="text" className="form-control" value={form.description} onChange={(e) => setForm({ ...form, description: e.target.value })} required />
                                    </div>

                                    <div className="mb-3">
                                        <label className="form-label">‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô (‡∏ö‡∏≤‡∏ó)</label>
                                        <input type="number" className="form-control" value={form.amount} onChange={(e) => setForm({ ...form, amount: e.target.value })} required />
                                    </div>

                                    <div className="mb-3">
                                        <label className="form-label">‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏á‡∏¥‡∏ô</label>
                                        <input 
                                            type="date"
                                            className="form-control"
                                            name="payout_date"
                                            value={form.payout_date ? formatDate(form.payout_date) : ""}
                                            onChange={(e) => setForm({ ...form, payout_date: e.target.value })}
                                        />              
                                    </div>


                                    <div className="mb-3">
                                        <label className="form-label">‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏</label>
                                        <textarea className="form-control" value={form.notes} onChange={(e) => setForm({ ...form, notes: e.target.value })}></textarea>
                                    </div>

                                    <div className="modal-footer">
                       
                                    {form.id && (
                                        <button 
                                            className="btn btn-danger"
                                            onClick={() => handleDelete(form.id)}
                                        >
                                            üóë ‡∏•‡∏ö
                                        </button>
                                    )}
                                        <button type="submit" className="btn btn-primary">{form.id ? "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï" : "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å"}</button>
                                        
                                    </div>
                                </form>
                            </div>
                        </div>
                    </div>
                </div>
            )}

        </div>
    );
};

export default Payouts;
