import React, { useState, useEffect } from 'react';
import { processPayment } from '../services/api'; // ‚úÖ ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API
import { checkSession } from "../services/authService";

const InvoicePage = ({ queue }) => {
    const navigate = useNavigate();
    const [paymentMethod, setPaymentMethod] = useState(null);
    const [showQR, setShowQR] = useState(false);
    const [isPaid, setIsPaid] = useState(false);
    
    useEffect(() => {
    const verify = async () => {
        const user = await checkSession();
        if (!user) {
        setTimeout(() => navigate("/login"), 0);
        }
    };
    verify();
    }, [navigate]);


    const handlePayment = async () => {
        if (!paymentMethod) {
            alert("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏¥‡∏ò‡∏µ‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô");
            return;
        }

        const paymentData = {
            queue_id: queue.queue_id,
            amount: queue.total_price, // ‚úÖ ‡πÉ‡∏ä‡πâ‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡∏à‡∏≤‡∏Å queue
            payment_method: paymentMethod,
            transaction_id: paymentMethod === "qr_code" ? "QR123456" : null, // ‚úÖ Mock Transaction ID
        };

        try {
            const res = await processPayment(paymentData);
            alert("‚úÖ ‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");
            setIsPaid(true);
        } catch (error) {
            console.error("üî¥ Error processing payment:", error);
        }
    };

    return (
        <div className="invoice-page">
            <h1>üìú ‡πÉ‡∏ö‡πÅ‡∏à‡πâ‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤</h1>

            {/* ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ */}
            <table>
                <thead>
                    <tr>
                        <th>‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£</th>
                        <th>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏π‡πà</th>
                        <th>‡∏£‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ß‡∏°</th>
                    </tr>
                </thead>
                <tbody>
                    {queue.services.map((service, index) => (
                        <tr key={index}>
                            <td>{service.service_name}</td>
                            <td>{service.pair_count}</td>
                            <td>{(service.pair_count * service.price_per_pair).toFixed(2)} ‡∏ö‡∏≤‡∏ó</td>
                        </tr>
                    ))}
                    <tr>
                        <td colSpan="2"><strong>‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°</strong></td>
                        <td><strong>{queue.total_price.toFixed(2)} ‡∏ö‡∏≤‡∏ó</strong></td>
                    </tr>
                </tbody>
            </table>

            {/* ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏¥‡∏ò‡∏µ‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô */}
            <h2>üí≥ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏¥‡∏ò‡∏µ‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô</h2>
            <div className="payment-options">
                <label>
                    <input type="radio" name="payment" value="qr_code" onChange={() => setPaymentMethod("qr_code")} /> ‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏ú‡πà‡∏≤‡∏ô QR Code
                </label>
                <label>
                    <input type="radio" name="payment" value="cash" onChange={() => setPaymentMethod("cash")} /> ‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î
                </label>
            </div>

            {/* ‡∏õ‡∏∏‡πà‡∏°‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô */}
            {!isPaid ? (
                <button onClick={handlePayment} disabled={!paymentMethod}>‚úÖ ‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô</button>
            ) : (
                <p className="paid-text">‚úÖ ‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß</p>
            )}

            {/* ‡πÅ‡∏™‡∏î‡∏á QR Code */}
            {paymentMethod === "qr_code" && !isPaid && (
                <div className="qr-code">
                    <h3>üìå ‡∏™‡πÅ‡∏Å‡∏ô QR Code ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô</h3>
                    <img src="/path/to/qrcode.jpg" alt="QR Code" width="200" />
                </div>
            )}
        </div>
    );
};

export default InvoicePage;
