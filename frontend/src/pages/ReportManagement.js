import React, { useState, useEffect } from "react";
import { checkSession } from "../services/authService";
import { getReports, getBranches } from "../services/api"; // API ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏î‡∏∂‡∏á‡∏™‡∏≤‡∏Ç‡∏≤
import { jwtDecode } from "jwt-decode";
import "bootstrap/dist/css/bootstrap.min.css";
import ReportTable from "../components/ReportTable";

const ReportManagement = () => {

    const firstDay = new Date();
    firstDay.setDate(1); // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà 1
    const today = new Date();
    const firstDayOfMonth =  firstDay.toISOString().split('T')[0];
    const currentDate = today.toISOString().split("T")[0];

    const [reports, setReports] = useState([]);
    const [branches, setBranches] = useState([]);
    const [selectedBranch, setSelectedBranch] = useState(""); // ‚úÖ ‡πÉ‡∏ä‡πâ "" ‡πÅ‡∏ó‡∏ô null
    const [selectedReportType, setSelectedReportType] = useState(""); // ‚úÖ ‡πÉ‡∏ä‡πâ "" ‡πÅ‡∏ó‡∏ô null
    const [startDate, setStartDate] = useState(firstDayOfMonth);
    const [endDate, setEndDate] = useState(currentDate);
    const [isSuperAdmin, setIsSuperAdmin] = useState(false);
    const [selectedBranchName, setSelectedBranchName] = useState("");
    const [loading, setLoading] = useState(false); // ‚úÖ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•

    useEffect(() => {
        const init = async () => {
        const user = await checkSession();
        if (!user) return;

        const isSuperAdmin = user.role === "superadmin";
        setIsSuperAdmin(isSuperAdmin);
        setSelectedBranch(isSuperAdmin ? "" : user.branch_id);

        if (isSuperAdmin) fetchBranches();
    };

    init();
    }, []);

    const handleBranchChange = (e) => {
        const branchId = e.target.value;
        setSelectedBranch(branchId);
    
        // ‚úÖ ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏Ç‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö branchId
        const branch = branches.find(branch => branch.id.toString() === branchId.toString());
        setSelectedBranchName(branch ? branch.name : "‡∏ó‡∏∏‡∏Å‡∏™‡∏≤‡∏Ç‡∏≤");
        fetchReports();
        console.log("üìå Debug: Selected Branch Name =", branch ? branch.name : "‡∏ó‡∏∏‡∏Å‡∏™‡∏≤‡∏Ç‡∏≤");
    };

    const fetchBranches = async () => {
        try {
            const res = await getBranches();
            setBranches(res.data);
        } catch (error) {
            console.error("üî¥ Error fetching branches:", error);
        }
    };

    const fetchReports = async () => {
        try {
            if (!selectedReportType) return;
        
            setLoading(true);
        
            // Convert startDate to a Date object
            const start = new Date(startDate);
            // Ensure the time component is set to the beginning of the day (00:00:00)
            start.setHours(0, 0, 0, 0);
            const startOfDayString = start.toLocaleDateString('en-CA') + ' ' + start.toLocaleTimeString('en-CA', { hour12: false });
        
            // Convert endDate to a Date object
            const end = new Date(endDate);
            // Ensure the time component is set to the end of the day (23:59:59.999)
            end.setHours(23, 59, 59, 999);
            const endOfDayString = end.toLocaleDateString('en-CA') + ' ' + end.toLocaleTimeString('en-CA', { hour12: false });
        
            const res = await getReports({
              branch_id: selectedBranch,
              report_type: selectedReportType,
              start_date: startOfDayString,
              end_date: endOfDayString,
            });
        
            console.log("üìå Debug: Report Data", res.data);
            setReports(res.data);
          } catch (error) {
            console.error("üî¥ Error fetching reports:", error);
          } finally {
            setLoading(false);
          }
    };

      // ‚úÖ ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Ñ‡πà‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô
      const handleReportTypeChange = (e) => {
        
        setSelectedReportType(e.target.value);
        setStartDate(firstDayOfMonth); // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà 1 ‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
        setEndDate(currentDate); // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
        setReports([]); // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô
    };

     


    return (
        <div className="container mt-4">
            <h1>üìä ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô</h1>
            <div className="card p-3 mb-3 shadow">
                <div className="row">
                    {isSuperAdmin && (
                        <div className="col-md-3">
                            <label className="form-label">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏≤‡∏Ç‡∏≤</label>
                            <select className="form-select" value={selectedBranch || ""} onChange={handleBranchChange}>
                                <option value="">-- ‡∏ó‡∏∏‡∏Å‡∏™‡∏≤‡∏Ç‡∏≤ --</option>
                                {branches.map(branch => (
                                    <option key={branch.id} value={branch.id}>{branch.name}</option>
                                ))}
                            </select>
                        </div>
                    )}
                    <div className="col-md-3">
                        <label className="form-label">‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô</label>
                        <select className="form-select" value={selectedReportType || ""} onChange={handleReportTypeChange}>
                            <option value="">-- ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó --</option>
                            <option value="income">üìà ‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö</option>
                            <option value="payout">üìâ ‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢</option>
                            <option value="profitloss">üí∞ ‡∏Å‡∏≥‡πÑ‡∏£-‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô</option>
                            <option value="topservices">üî• ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏¢‡∏≠‡∏î‡∏ô‡∏¥‡∏¢‡∏°</option>
                            <option value="customer">üõçÔ∏è ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤</option>
                        </select>
                    </div>
                    <div className="col-md-2">
                        <label className="form-label">‡∏à‡∏≤‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà</label>
                        <input type="date" className="form-control" value={startDate} onChange={(e) => setStartDate(e.target.value)} />
                    </div>
                    <div className="col-md-2">
                        <label className="form-label">‡∏ñ‡∏∂‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà</label>
                        <input type="date" className="form-control" value={endDate} onChange={(e) => setEndDate(e.target.value)} />
                    </div>
                    <div className="col-md-2 d-flex align-items-end">
                        <button className="btn btn-primary w-100" onClick={fetchReports} disabled={!selectedReportType}>
                            üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
                        </button>
                    </div>
                </div>
            </div>

            {/* ‡∏õ‡∏∏‡πà‡∏°‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î */}
            <div className="d-flex justify-content-end mt-3">
                <button className="btn btn-success me-2" disabled={!reports.length}>üì• ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î Excel</button>
                <button className="btn btn-danger" disabled={!reports.length}>üìÑ ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î PDF</button>
            </div>

            {/* ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô */}
            <div className="card p-3 shadow">
                {loading ? (
                    <div className="text-center py-3">‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...</div>
                ) : reports.length > 0 ? (
                    <ReportTable reportType={selectedReportType} reportBranch={selectedBranchName} reports={reports} />
                ) : (
                    <div className="text-center text-muted py-3">üîç ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô</div>
                )}
            </div>
        </div>
    );
};

export default ReportManagement;
