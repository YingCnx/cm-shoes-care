import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { getAppointments, createQueue, updateAppointmentQueueId, getBranches } from '../services/api';
import '../assets/css/bootstrap.min.css';
import './QueueEntry.css';

const QueueEntry = () => {
    const navigate = useNavigate();
    const token = localStorage.getItem("token");
    const user = JSON.parse(atob(token.split(".")[1])); // ‚úÖ Decode JWT
    const isAdmin = user.isSuperAdmin;
    
    const [appointments, setAppointments] = useState([]);
    const [branches, setBranches] = useState([]);
    const [customerName, setCustomerName] = useState('');
    const [phone, setPhone] = useState('');
    const [location, setLocation] = useState('Walk-in');
    const [totalPairs, setTotalPairs] = useState(1);
    const [deliveryDate, setDeliveryDate] = useState(() => {
        const tomorrow = new Date();
        tomorrow.setDate(tomorrow.getDate() + 3);
        return tomorrow.toISOString().split('T')[0];
    });
    const [selectedAppointmentId, setSelectedAppointmentId] = useState(null);
    const [selectedBranch, setSelectedBranch] = useState(() => isAdmin ? "" : user.branch_id);

    useEffect(() => {
        if (isAdmin) {
            fetchBranches();
        }
    }, [isAdmin]);

    useEffect(() => {
        if (selectedBranch) {
            fetchAppointments(selectedBranch);
        }
        else{
            fetchAppointments();
        }
    }, [selectedBranch]);

    const fetchAppointments = async (branchId) => {
        try {
            const res = await getAppointments();
            
            let filteredAppointments = res.data.filter(appt => 
                appt.status === '‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' && (!appt.queue_id || appt.queue_id === null)
            );

            // ‚úÖ ‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏° branch_id ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
            filteredAppointments = filteredAppointments.filter(appt => appt.branch_id === branchId);

            setAppointments(filteredAppointments);
        } catch (error) {
            console.error("üî¥ Error fetching appointments:", error);
        }
    };

    const fetchBranches = async () => {
        try {
            const res = await getBranches();
            //console.log("üìå Debug: Branches Data", res.data);
            
            setBranches(res.data);
        } catch (error) {
            console.error("üî¥ Error fetching branches:", error);
            alert("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≤‡∏Ç‡∏≤‡πÑ‡∏î‡πâ");
        }
    };

    const handleCreateQueue = async () => {
        if (!customerName || !phone || !totalPairs || !deliveryDate || (!selectedBranch && isAdmin)) {
            alert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô");
            return;
        }
    
        if (!window.confirm("‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏¥‡∏ß‡∏ô‡∏µ‡πâ?")) return;
    
        try {
            const newQueue = {
                customer_name: customerName,
                phone,
                location,
                total_pairs: totalPairs,
                delivery_date: deliveryDate,
                branch_id: isAdmin ? selectedBranch : user.branch_id,
            };
    
           // console.log("üìå Debug: Queue Data", newQueue);
            
            // ‚úÖ ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏¥‡∏ß ‡πÅ‡∏•‡πâ‡∏ß‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤ `queue_id` ‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤
            const response = await createQueue(newQueue);

            const queue_id = response.queue_id; // ‚úÖ ‡∏£‡∏±‡∏ö `queue_id` ‡∏à‡∏≤‡∏Å API
    
            //console.log("üìå Debug: ‡∏Ñ‡∏¥‡∏ß‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡πâ‡∏ß queue_id:", queue_id);
    
            // ‚úÖ ‡∏ñ‡πâ‡∏≤‡∏°‡∏≤‡∏à‡∏≤‡∏Å `appointment` ‚Üí ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï `appointments.queue_id`
            if (selectedAppointmentId) {
                //console.log(`üìå Debug: ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï appointment ${selectedAppointmentId} ‡∏î‡πâ‡∏ß‡∏¢ queue_id: ${queue_id}`);
                await updateAppointmentQueueId(selectedAppointmentId, queue_id);
            }
    
            alert("‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏¥‡∏ß‡∏á‡∏≤‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!");
            navigate('/queue');
        } catch (error) {
            console.error("üî¥ Error creating queue:", error);
            alert("‚ùå ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏¥‡∏ß");
        }
    };
    

    const handleSelectAppointment = (appointment) => {
        setCustomerName(appointment.customer_name);
        setPhone(appointment.phone);
        setLocation(appointment.location || "Walk-in");
        setTotalPairs(appointment.shoe_count);
        setSelectedAppointmentId(appointment.id);
    };

    const handleClearForm = () => {
        setCustomerName('');
        setPhone('');
        setLocation('Walk-in');
        setTotalPairs(1);
        setDeliveryDate(() => {
            const tomorrow = new Date();
            tomorrow.setDate(tomorrow.getDate() + 1);
            return tomorrow.toISOString().split('T')[0];
        });
        setSelectedAppointmentId(null);
    };


    return (
        <div className="container mt-4">
            <div className="d-flex justify-content-between mb-3">
                <button className="btn btn-secondary" onClick={() => navigate('/queue')}>
                    ‚¨ÖÔ∏è ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏Ñ‡∏¥‡∏ß
                </button>
            </div>

            <div className="row">
                <div className="col-md-6">
                    <h2 className="mb-3">üìÖ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢</h2>
                    {isAdmin && (
                        <div className="mb-3">
                            <label className="form-label">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏≤‡∏Ç‡∏≤</label>
                            <select className="form-select" value={selectedBranch} onChange={(e) => setSelectedBranch(Number(e.target.value))}>
                                <option value="">-- ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏≤‡∏Ç‡∏≤ --</option>
                                {branches.map(branch => (
                                    <option key={branch.id} value={branch.id}>{branch.name}</option>
                                ))}
                            </select>
                        </div>
                    )}
                    <table className="table table-bordered table-striped">
                        <thead>
                            <tr>
                                <th>‡∏ä‡∏∑‡πà‡∏≠</th>
                                <th>‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£</th>
                                <th>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏π‡πà</th>
                                <th>‡πÄ‡∏•‡∏∑‡∏≠‡∏Å</th>
                            </tr>
                        </thead>
                        <tbody>
                            {appointments.map(appt => (
                                <tr key={appt.id}>
                                    <td>{appt.customer_name}</td>
                                    <td>{appt.phone}</td>
                                    <td>{appt.shoe_count}</td>
                                    <td>
                                        <button className="btn btn-primary btn-sm" onClick={() => handleSelectAppointment(appt)}>
                                            ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
                                        </button>
                                    </td>
                                </tr>
                            ))}
                        </tbody>
                    </table>
                </div>               

                <div className="col-md-6">
                    <h2 className="mb-3">üÜï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏¥‡∏ß‡πÉ‡∏´‡∏°‡πà (Walk-in)</h2>
                    <div className="card p-3 shadow">
                        

                        <div className="mb-2">
                            <label className="form-label">‡∏ä‡∏∑‡πà‡∏≠</label>
                            <input type="text" className="form-control" value={customerName} onChange={(e) => setCustomerName(e.target.value)} />
                        </div>
                        <div className="mb-2">
                            <label className="form-label">‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£</label>
                            <input type="text" className="form-control" value={phone} onChange={(e) => setPhone(e.target.value)} />
                        </div>
                        <div className="mb-2">
                            <label className="form-label">‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà</label>
                            <input type="text" className="form-control" value={location} onChange={(e) => setLocation(e.target.value)} />
                        </div>
                        <div className="mb-2">
                            <label className="form-label">‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏π‡πà‡∏£‡∏≠‡∏á‡πÄ‡∏ó‡πâ‡∏≤</label>
                            <input type="number" className="form-control" value={totalPairs} onChange={(e) => setTotalPairs(Number(e.target.value))} />
                        </div>
                        <div className="mb-3">
                            <label className="form-label">‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡πà‡∏á‡∏Ñ‡∏∑‡∏ô</label>
                            <input type="date" className="form-control" value={deliveryDate} onChange={(e) => setDeliveryDate(e.target.value)} />
                        </div>
                        <div className="d-flex gap-2">
                            <button className="btn btn-success w-50" onClick={handleCreateQueue}>
                                ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏¥‡∏ß
                            </button>
                            <button className="btn btn-danger w-50" onClick={handleClearForm}>
                                ‚ùå ‡∏•‡πâ‡∏≤‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏°
                            </button>
                        </div>

                    </div>
                </div>
            </div>
        </div>
    );
};

export default QueueEntry;
