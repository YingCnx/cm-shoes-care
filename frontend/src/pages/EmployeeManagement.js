import React, { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import { getEmployees, createEmployee, updateEmployee, deleteEmployee, getBranches,updateEmployeePassword } from "../services/api";
import { jwtDecode } from "jwt-decode";
import AddEmployeeModal from "../components/AddEmployeeModal";
import { checkSession } from "../services/authService";
import "../assets/css/bootstrap.min.css";
import './EmployeeManagement.css';
import ChangePasswordModal from "../components/ChangePasswordModal";


const EmployeeManagement = () => {
    const navigate = useNavigate();
    const [employees, setEmployees] = useState([]);
    const [branches, setBranches] = useState([]);
    const [selectedBranch, setSelectedBranch] = useState("");
    const [isSuperAdmin, setIsSuperAdmin] = useState(false);
    const [employeeId, setEmployeeId] = useState(null);
    const [showAddModal, setShowAddModal] = useState(false);
    const [editEmployee, setEditEmployee] = useState(null);

    const [showPasswordModal, setShowPasswordModal] = useState(false);
    const [selectedEmployeeId, setSelectedEmployeeId] = useState(null);


    useEffect(() => {
    const init = async () => {
        const user = await checkSession();
        if (!user) {
        setTimeout(() => navigate("/login"), 0);
        return;
        }

        const isSuperAdmin = user.role === "superadmin";
        setIsSuperAdmin(isSuperAdmin);
        setEmployeeId(user.id);
        setSelectedBranch(isSuperAdmin ? null : user.branch_id);

        if (isSuperAdmin) {
        fetchBranches();
        } else {
        fetchEmployees(user.branch_id);
        }
    };

    init();
    }, [navigate]);

    useEffect(() => {
        if (selectedBranch !== null) {
            fetchEmployees(selectedBranch);
        }
    }, [selectedBranch]);

    const fetchBranches = async () => {
        try {
            const res = await getBranches();
            setBranches(res.data);
        } catch (error) {
            console.error("üî¥ Error fetching branches:", error);
        }
    };
    const fetchEmployees = async (branchId) => {
        try {          
            const res = await getEmployees(branchId);
            setEmployees(res.data);
            
        } catch (error) {
            console.error("üî¥ Error fetching employees:", error);
        }
    };

    
    const handleCreateOrUpdateEmployee = async (employeeData) => {
        try {
            // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡∏Ç‡∏≠‡∏á branch_id ‡πÅ‡∏•‡∏∞‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô `null` ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á
            if (employeeData.branch_id === "" || employeeData.branch_id === undefined) {
                employeeData.branch_id = null;
            } else {
                employeeData.branch_id = parseInt(employeeData.branch_id); // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
            }

            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            if (!employeeData.name || !employeeData.email || !employeeData.phone || !employeeData.role || employeeData.branch_id === null) {
                console.error("‚ùå ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô:", employeeData);
                alert("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô");
                return; // ‚ùå ‡πÑ‡∏°‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏á Modal ‡πÑ‡∏ß‡πâ
            }
    
            let response;
            if (employeeData.id) {
                response = await updateEmployee(employeeData.id, employeeData);
            } else {
                response = await createEmployee(employeeData);
            }
    
            // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á/‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            if (response.status === 201 || response.status === 200) {
                alert("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");
                fetchEmployees(); // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô
                setShowAddModal(false); // ‚úÖ ‡∏õ‡∏¥‡∏î Modal ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
                setEditEmployee(null); // ‚úÖ ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
            } else {
                console.error("üî¥ Unexpected response:", response);
                alert("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ");
            }
        } catch (error) {
            console.error("üî¥ Error saving employee:", error);
            alert("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ");
        }
    };
    
    

    const handleDelete = async (id) => {
        if (!window.confirm("‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ô‡∏µ‡πâ?")) {
            return;
        }
    
        try {
            const response = await deleteEmployee(id);
    
            if (response.status === 200) {
                alert("‚úÖ ‡∏•‡∏ö‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢");
                fetchEmployees(); // ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà
            } else {
                console.error("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô:", response.data);
                alert("‚ùå ‡∏•‡∏ö‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");
            }
        } catch (error) {
            console.error("üî¥ Error deleting employee:", error);
            alert("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ");
        }
    };

        
    const handleChangePassword = (id) => {
    setSelectedEmployeeId(id);
    setShowPasswordModal(true);
    };

    const handleSavePassword = async (id, newPassword) => {
    try {
        await updateEmployeePassword(id, newPassword);
        alert("‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß");
        setShowPasswordModal(false);
    } catch (error) {
        console.error("üî¥ Error changing password:", error);
        alert("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô");
    }
    };

    return (
        <div className="employee-container">
            <h2>üë• ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô</h2>
            <div className="d-flex justify-content-between align-items-center mb-3">
                <button className="btn btn-secondary" onClick={() => navigate("/dashboard")}>‚¨ÖÔ∏è ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ Dashboard</button>
                <button className="btn btn-primary" onClick={() => setShowAddModal(true)}>‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô</button>
            </div>

             {/* ‚úÖ ‡∏ü‡∏¥‡∏•‡πÄ‡∏ï‡∏≠‡∏£‡πå SuperAdmin ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏≤‡∏Ç‡∏≤ */}
             {isSuperAdmin && (
                <div className="mb-3">
                    <label className="form-label">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏≤‡∏Ç‡∏≤</label>
                    <select className="form-control" value={selectedBranch || ''} onChange={(e) => setSelectedBranch(e.target.value)}>
                        <option value="">-- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏≤‡∏Ç‡∏≤ --</option>
                        {branches.map(branch => (
                            <option key={branch.id} value={branch.id}>{branch.name}</option>
                        ))}
                    </select>
                </div>
            )}

            {/* ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô */}
            <table className="table table-bordered table-striped">
                <thead className="table-dark">
                    <tr>
                        <th>‡∏ä‡∏∑‡πà‡∏≠</th>
                        <th>‡∏≠‡∏µ‡πÄ‡∏°‡∏•</th>
                        <th>‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠</th>
                        <th>‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á</th>
                        <th>‡∏™‡∏≤‡∏Ç‡∏≤</th>
                        <th>‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£</th>
                    </tr>
                </thead>
                <tbody>
                    {employees.map(employee => (
                        <tr key={employee.id}>
                            <td>{employee.name}</td>
                            <td>{employee.email}</td>
                            <td>{employee.phone}</td>
                            <td>{employee.role}</td>
                            <td>{employee.branch_name || "-"}</td>
                            <td>
                                <button
                                    className="btn btn-warning btn-sm"
                                    onClick={() => {
                                    setEditEmployee(employee);
                                    setShowAddModal(true);
                                    }}
                                >
                                    ‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
                                </button>
                                 <button
                                    className="btn btn-secondary btn-sm ms-2"
                                    onClick={() => handleChangePassword(employee.id)}
                                >
                                    üîê ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô
                                </button>
                                <button
                                    className="btn btn-danger btn-sm ms-2"
                                    onClick={() => handleDelete(employee.id)}
                                >
                                    ‚ùå ‡∏•‡∏ö
                                </button>

                               
                                </td>

                        </tr>
                    ))}
                </tbody>
            </table>

            {/* ‡πÅ‡∏™‡∏î‡∏á Modal ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô" ‡∏´‡∏£‡∏∑‡∏≠ "‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô" */}
            {showAddModal && (
                <AddEmployeeModal
                    show={showAddModal}
                    onClose={() => {// ‚ùå ‡∏õ‡∏¥‡∏î Modal ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
                            setShowAddModal(false);
                            setEditEmployee(null);
                    }}
                    onSave={handleCreateOrUpdateEmployee}
                    employeeData={editEmployee}
                />
            )}
            
            <ChangePasswordModal
                show={showPasswordModal}
                onClose={() => setShowPasswordModal(false)}
                onSave={handleSavePassword}
                employeeId={selectedEmployeeId}
                />
        </div>
    );
};

export default EmployeeManagement;
